[
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html",
    "title": "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky",
    "section": "",
    "text": "In this take home exercise, we will be working towards creating a protoype module as part of the Visual Analytics Project. Specific to this exercise, it will solely comprise the Exploratory Data Analysis (EDA is my part), as the Confirmatory Data Analysis (CDA) and Forecasting are anchored by Simin and Sihui respectively. A draft UI design for R Shiny App will also be prepared as a precursor to the final project dashboard."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#loading-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#loading-r-packages",
    "title": "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky",
    "section": "2.1 Loading R Packages",
    "text": "2.1 Loading R Packages\nThe following R packages will be used, as shown in the code chunk below:\n\npacman::p_load(dplyr, naniar, kableExtra,\n               tidyverse, DT, ggplot2, ggridges,  \n               ggdist, ggstatsplot,\n               plotly, ggiraph, \n               viridis, gganimate)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#importing-weather-data",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#importing-weather-data",
    "title": "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky",
    "section": "2.2 Importing Weather Data",
    "text": "2.2 Importing Weather Data\nThe data sets will be downloaded from historical daily temperature from Meteorological Service Singapore website. The data will focus on rain and temperature (the wind data will excluded as it falls outside the project scope).\nThe code chunk is as follows:\n\nall_data &lt;- read_csv(\"data/daily_historical.csv\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#data-wrangling",
    "title": "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky",
    "section": "2.3 Data Wrangling",
    "text": "2.3 Data Wrangling\nFirst, we will find out how the temperature and rainfall data look like using boxplots.\n\n\nCode\nggplot(all_data,\n       aes(y= mean_temperature,\n           x = as.factor(year))) +\n  facet_wrap(~station) +\n  geom_boxplot() +\n  theme(axis.text.x = element_text(angle = 60,\n                                   size = 6))\n\n\n\n\n\nCode\nggplot(all_data,\n       aes(y= daily_rainfall_total,\n           x = as.factor(year))) +\n  facet_wrap(~station) +\n  geom_boxplot() +\n  theme(axis.text.x = element_text(angle = 60,\n                                   size = 6))\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom the output above, there are only 13/37 stations that captured temperature data, while only 13/37 stations captured rainfall data from 1980 onwards (with the remaining stations starting from 2009 onwards). For ease of comparison, we will only look at the 13 stations with both temperature and rainfall data, and between a ten-year observation from 2014 to 2023.\n\n\nWe will proceed to drop all those station with missing data, and filter those results from 2014 onwards, using the code chunk below.\n\n\nCode\nfiltered_data &lt;- all_data %&gt;% \n  filter(year &gt;=\"2014\") %&gt;%\n  drop_na() \n\n\nLet’s examine the boxplots based again.\n\n\nCode\nggplot(filtered_data,\n       aes(y= mean_temperature,\n           x = as.factor(year))) +\n  facet_wrap(~station) +\n  geom_boxplot() +\n  theme(axis.text.x = element_text(angle = 60,\n                                   size = 6))\n\n\n\n\n\nCode\nggplot(filtered_data,\n       aes(y= daily_rainfall_total,\n           x = as.factor(year))) +\n  facet_wrap(~station) +\n  geom_boxplot() +\n  theme(axis.text.x = element_text(angle = 60,\n                                   size = 6))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#aggregating-weather-stations-by-regions",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#aggregating-weather-stations-by-regions",
    "title": "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky",
    "section": "2.4 Aggregating weather stations by regions",
    "text": "2.4 Aggregating weather stations by regions\n\nWith reference to the map above, we will carve out Singapore into three main regions for easier visualisations subsequently:\n\nWest &lt;- South West + North West districts\nCentral &lt;- Central Singapore district\nEast &lt;- North East + South East districts\n\n\n\nCode\nfiltered_data &lt;- filtered_data %&gt;%\n  mutate(region = case_when(\n     (station == \"Clementi\" | station == \"Tuas South\" | station == \"Choa Chu Kang (South)\" | station == \"Jurong (West)\" | station == \"Jurong Island\" | station == \"Admiralty\" | station == \"Pasir Panjang\") ~ \"West\",\n    (station == \"Ang Mo Kio\" | station == \"Newton\"  | station == \"Sentosa Island\") ~ \"Central\",\n    (station == \"Changi\" | station == \"East Coast Parkway\" | station == \"Tai Seng\") ~ \"East\"\n    ))\n\n\nWe will now extract the relevant data for temperature and rainfall, and save the data in rds format for faster data wrangling.\n\n\nCode\nfiltered_data &lt;- filtered_data %&gt;%\n  select(station, year, month, day, mean_temperature, maximum_temperature, minimum_temperature, daily_rainfall_total, highest_30_min_rainfall, highest_60_min_rainfall, highest_120_min_rainfall,region)\n\nwrite_rds(filtered_data, \"data/filtered_data.rds\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#aggregating-the-mean-min-and-max-temperatures-by-month",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#aggregating-the-mean-min-and-max-temperatures-by-month",
    "title": "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky",
    "section": "3.1 Aggregating the Mean, Min and Max Temperatures by Month",
    "text": "3.1 Aggregating the Mean, Min and Max Temperatures by Month\nAs the data is broken down by days, there will simply be too many data points across the 10 years of data (from 2014 to 2023). Thus, we will aggregate the data by monthly mean temperature, monthly mininum temperature and monthly maximum temperature.\n\n\nCode\nmonthly_mean_temp &lt;- aggregate(mean_temperature ~ region + station + year + month, data = filtered_data, FUN = mean)\n\nmonthly_min_temp &lt;- aggregate(minimum_temperature ~ region + station +year + month, data = filtered_data, FUN = min)\n\nmonthly_max_temp &lt;- aggregate(maximum_temperature ~ region + station + year + month, data = filtered_data, FUN = max)\n\nmerged_temp &lt;- monthly_mean_temp %&gt;%\n  left_join(monthly_max_temp, by = c(\"region\", \"station\", \"year\", \"month\")) %&gt;%\n  left_join(monthly_min_temp, by = c(\"region\", \"station\", \"year\", \"month\"))\n\nglimpse(merged_temp)\n\n\nRows: 1,532\nColumns: 7\n$ region              &lt;chr&gt; \"West\", \"Central\", \"East\", \"West\", \"West\", \"East\",…\n$ station             &lt;chr&gt; \"Admiralty\", \"Ang Mo Kio\", \"Changi\", \"Choa Chu Kan…\n$ year                &lt;dbl&gt; 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 20…\n$ month               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ mean_temperature    &lt;dbl&gt; 25.79355, 25.82581, 26.20323, 26.12581, 25.93871, …\n$ maximum_temperature &lt;dbl&gt; 31.9, 31.8, 31.8, 31.7, 32.0, 31.1, 31.7, 33.0, 32…\n$ minimum_temperature &lt;dbl&gt; 22.4, 22.5, 22.4, 22.6, 22.5, 23.4, 22.0, 23.4, 23…"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#distributions-of-temperature-data",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#distributions-of-temperature-data",
    "title": "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky",
    "section": "3.2 Distributions of Temperature Data",
    "text": "3.2 Distributions of Temperature Data\n\nRidgeline plotBoxplotViolin plots\n\n\nDistribution of mean temperature\n\n\nCode\nridge_plot_t1 &lt;- ggplot(merged_temp, aes(x = mean_temperature, y=factor(year), fill = stat(x))) +\n  geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +\n  scale_y_discrete(name= NULL) +\n  scale_fill_viridis_c(name = \"°C\", option = \"C\") +\n  labs(title = 'Distribution of Monthly Mean Temperature across years',\n       x = \"Temperature (°C)\",\n       y = \"Year\") +\n  theme_ridges(font_size = 13, grid = TRUE) +\n    theme(plot.title = element_text(size = 14),\n        plot.subtitle = element_text(size = 10),\n        axis.title.x = element_text(size = 8),\n        axis.title.y = element_text(size = 8, angle = 360))\n\nridge_plot_t1\n\n\n\n\n\n\n\n\n\nHere is an animated visualisation of the changes in mean temperatures\n\n\nCode\nggplot(data = merged_temp, \n       aes(x = mean_temperature, \n           y = station,\n           fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  \n  scale_fill_viridis_c(name = \"Colour Scale\",\n                       option = \"C\") +\n  \n  theme_minimal() +\n    labs(title = \"Distribution of Mean Temperatures by Station & Year\",\n      subtitle = \"Year: {closest_state}\",\n       y = \"Station\",\n       x = \"Temperature (°C)\") +\n  \n  theme(legend.position=\"none\",\n  plot.title = element_text(face = \"bold\", size = 12),\n  axis.title.x = element_text(size = 10),\n  axis.title.y = element_text(hjust=1, angle=0, size = 10),\n  axis.text = element_text(size = 8),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n\n  transition_states(year) + \n  ease_aes('linear')\n\n\n\n\n\n\n\n\n\n\n\nDistribution of mean temperature\n\n\nCode\nbox_plot_t1 &lt;- ggplot(merged_temp, \n                   aes(y= mean_temperature,\n                       x = as.factor(year))) +\n  geom_boxplot()+\n  facet_wrap(~station) +\n  theme(axis.text.x = element_text(angle = 60)) +\n  scale_x_discrete(name = \"Year\") +\n  scale_y_continuous(name = \"Mean Temperature\")\n\nbox_plot_t1\n\n\n\n\n\n\n\n\n\nDistribution of mean temperature by regions\n\n\nCode\nbox_plot_t2 &lt;- ggplot(merged_temp, \n                   aes(y= mean_temperature,\n                       x = as.factor(year))) +\n  geom_boxplot()+\n  facet_wrap(~ region) +\n  theme(axis.text.x = element_text(angle = 85,\n                                   size = 6)) +\n  scale_x_discrete(name = \"Year\") +\n  scale_y_continuous(name = \"Mean Temperature\")\n\nbox_plot_t2\n\n\n\n\n\n\n\n\n\n\n\nDistribution of mean temperature\n\n\nCode\nviolin_plot_t1 &lt;- plot_ly(data = merged_temp, x = ~year, y = ~mean_temperature, type = 'violin', \n               split = ~year, \n               box = list(visible = T),\n               meanline = list(visible = T)) %&gt;% # Adds a box plot inside the violin for summary statistics\n  layout(title = list(text = \"&lt;b&gt;Distribution of Mean Temperatures Across Years&lt;/b&gt;\", \n                                                   font = list(family = \"Arial\", size = 14),\n                                                   xanchor = \"center\", xref = \"paper\",\n                                                   yanchor = \"middle\", yref = \"paper\"),\n                      yaxis = list(title = list(text = \"Temperature (°C)\", \n                                                font = list(family = \"Arial\", size = 12)) ),\n                      xaxis = list(title = list(text = \"Year\", \n                                                font = list(family = \"Arial\", size = 12)) ))\n\nviolin_plot_t1"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#aggregating-the-daily-rainfall-and-highest-rainfall-by-month",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#aggregating-the-daily-rainfall-and-highest-rainfall-by-month",
    "title": "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky",
    "section": "4.1 Aggregating the Daily Rainfall, and Highest Rainfall by Month",
    "text": "4.1 Aggregating the Daily Rainfall, and Highest Rainfall by Month\nSimilar to temperature data, we will aggregate the data by total monthly rainfall, highest 30min/ 60min and 120min rainfall within a month.\n\n\nCode\nmonthly_rainfall &lt;- aggregate(daily_rainfall_total ~ region + station + year + month, data = filtered_data, FUN = sum)\n\nhighest_30min_rainfall &lt;- aggregate(highest_30_min_rainfall ~ region + station +year + month, data = filtered_data, FUN = max)\n\nhighest_60min_rainfall &lt;- aggregate(highest_60_min_rainfall ~ region + station + year + month, data = filtered_data, FUN = max)\n\nhighest_120min_rainfall &lt;- aggregate(highest_120_min_rainfall ~ region + station + year + month, data = filtered_data, FUN = max)\n\nmerged_rainfall &lt;- monthly_rainfall %&gt;%\n  left_join(highest_30min_rainfall, by = c(\"region\", \"station\", \"year\", \"month\")) %&gt;%\n  left_join(highest_60min_rainfall, by = c(\"region\", \"station\", \"year\", \"month\")) %&gt;%\n  left_join(highest_120min_rainfall, by = c(\"region\", \"station\", \"year\", \"month\"))\n\n#renaming the column name \"daily_rainfall_total\" to \"monthly_rainfall_total\" for a more accurate description\ncolnames(merged_rainfall)[colnames(merged_rainfall) == \"daily_rainfall_total\"] &lt;- \"monthly_rainfall_total\"\n\nglimpse(merged_rainfall)\n\n\nRows: 1,532\nColumns: 8\n$ region                   &lt;chr&gt; \"West\", \"Central\", \"East\", \"West\", \"West\", \"E…\n$ station                  &lt;chr&gt; \"Admiralty\", \"Ang Mo Kio\", \"Changi\", \"Choa Ch…\n$ year                     &lt;dbl&gt; 2014, 2014, 2014, 2014, 2014, 2014, 2014, 201…\n$ month                    &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ monthly_rainfall_total   &lt;dbl&gt; 98.8, 66.6, 75.4, 79.4, 50.0, 52.0, 88.6, 72.…\n$ highest_30_min_rainfall  &lt;dbl&gt; 21.8, 8.6, 18.2, 17.2, 7.6, 12.8, 16.6, 16.8,…\n$ highest_60_min_rainfall  &lt;dbl&gt; 26.2, 9.4, 18.2, 22.6, 10.8, 13.2, 23.8, 23.6…\n$ highest_120_min_rainfall &lt;dbl&gt; 30.6, 13.8, 18.2, 28.4, 15.2, 13.2, 27.2, 25.…"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#distributions-of-rainfall-data",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#distributions-of-rainfall-data",
    "title": "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky",
    "section": "4.2 Distributions of Rainfall Data",
    "text": "4.2 Distributions of Rainfall Data\n\nRidgeline PlotBox PlotViolin Plot\n\n\n\n\nCode\nridge_plot_r1 &lt;- ggplot(merged_rainfall, aes(x = monthly_rainfall_total, y=factor(year), fill = stat(x))) +\n  geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +\n  scale_y_discrete(name= NULL) +\n  scale_fill_viridis_c(name = \"°C\", option = \"C\") +\n  labs(title = 'Distribution of Monthly Rainfall Across Years',\n       x = \"Rainfall(mm)\",\n       y = \"Year\") +\n  theme_ridges(font_size = 13, grid = TRUE) +\n    theme(plot.title = element_text(size = 14),\n        plot.subtitle = element_text(size = 10),\n        axis.title.x = element_text(size = 8),\n        axis.title.y = element_text(size = 8, angle = 360))\n\nridge_plot_r1\n\n\n\n\n\n\n\n\n\nHere is an animated visualisation of the changes in mean temperatures\n\n\nCode\nggplot(data = merged_rainfall, \n       aes(x = monthly_rainfall_total, \n           y = station,\n           fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  \n  scale_fill_viridis_c(name = \"Colour Scale\",\n                       option = \"C\") +\n  \n  theme_minimal() +\n    labs(title = \"Distribution of Monthly Total Rainfall by Station & Year\",\n      subtitle = \"Year: {closest_state}\",\n       y = \"Station\",\n       x = \"Rainfall\") +\n  \n  theme(legend.position=\"none\",\n  plot.title = element_text(face = \"bold\", size = 12),\n  axis.title.x = element_text(size = 10),\n  axis.title.y = element_text(hjust=1, angle=0, size = 10),\n  axis.text = element_text(size = 8),\n  plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\")) +\n\n  transition_states(year) + \n  ease_aes('linear')\n\n\n\n\n\n\n\n\n\n\n\nDistribution of Monthly Total Rainfall\n\n\nCode\nbox_plot_r1 &lt;- ggplot(merged_rainfall, \n                   aes(y= monthly_rainfall_total,\n                       x = as.factor(year))) +\n  geom_boxplot()+\n  facet_wrap(~station)+\n  theme(axis.text.x = element_text(angle = 60)) +\n  scale_x_discrete(name = \"Year\") +\n  scale_y_continuous(name = \"Monthly Total Rainfall(mm)\")\n\nbox_plot_r1\n\n\n\n\n\n\n\n\n\nDistribution of Monthly Total Rainfall by Region\n\n\nCode\nbox_plot_r2 &lt;- ggplot(merged_rainfall, \n                   aes(y= monthly_rainfall_total,\n                       x = as.factor(year))) +\n  geom_boxplot()+\n  facet_wrap(~ region) +\n  theme(axis.text.x = element_text(angle = 85,\n                                   size = 6)) +\n  scale_x_discrete(name = \"Year\") +\n  scale_y_continuous(name = \"Monthly Total Rainfall(mm)\")\n\nbox_plot_r2\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nviolin_plot_t1 &lt;- plot_ly(data = merged_rainfall, x = ~year, y = ~monthly_rainfall_total, type = 'violin', \n               split = ~year, \n               box = list(visible = T),\n               meanline = list(visible = T)) %&gt;% # Adds a box plot inside the violin for summary statistics\n  layout(title = list(text = \"&lt;b&gt;Distribution of Monthly Total Rainfall Across Years&lt;/b&gt;\", \n                                                   font = list(family = \"Arial\", size = 14),\n                                                   xanchor = \"center\", xref = \"paper\",\n                                                   yanchor = \"middle\", yref = \"paper\"),\n                      yaxis = list(title = list(text = \"Rainfall(mm)\", \n                                                font = list(family = \"Arial\", size = 12)) ),\n                      xaxis = list(title = list(text = \"Year\", \n                                                font = list(family = \"Arial\", size = 12)) ))\n\nviolin_plot_t1"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#parameters-to-expose",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#parameters-to-expose",
    "title": "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky",
    "section": "5.1 Parameters to Expose",
    "text": "5.1 Parameters to Expose\n\nWeather Station : Choosing from one of the 13 weather stations, or by regions\nType of data : Temperature or Rainfall\nNumber of months : from one to ten years\n\n\n\n\n\n\n\nThings to improve for Project\n\n\n\nBased on the feedback from Prof Kam, the EDA module will need to take note of the following four principal considerations:\n\nAppropriateness of analytical methods used\n\n-   Relationship between two variables, supported by stats (using**ggstatplot** \\\n    e.g. ggscatterplot, to control the confidence interval, or x and y axes)\n\n-   Example: Use annual mean between stations, and identify if there is a relationship using a boxplot\n\nAppropriateness of data visualisation methods used\n\nDon’t just show average in a bar chart, use a boxplot to show the distribution\n\nAppropriateness of R packages used\n\nFor interactivity, consider using\n\ngiraffe\nplotly\neither timetk or tidyvert (but not both)\ntsibble for date wrangling (auto aggregation)\n\n\nAppropriateness of UI design used\n\nLayout\nConfigurations (expose the statistical methods e.g. confidence interval, p-value, t-test, to calibrate the model)\nDon’t expose things that readers don’t need to know"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take Home Ex 02: DataVis Makeover",
    "section": "",
    "text": "In this take home exercise, we will:\n\nselect one of the Take-home Exercise 1 prepared by my classmate, Freddie Jr. Ngo Tan\ncritic the submission in terms of clarity and aesthetics,\nprepare a sketch for the alternative design by using the data visualisation design principles and best practices we had learned in Lesson 1 and 2, and\nremake the original design by using ggplot2, ggplot2 extensions and tidyverse packages.\n\n\n\nThe aim of Take Home Exercise 01 was to use appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions to reveal:\n\nthe distribution of Singapore students’ performance in mathematics, reading, and science, and\nthe relationship between these performances with schools, gender and socioeconomic status of the students.\n\nThe dataset used was extracted from the “PISA 2022 database” which contains the full set of responses from individual students."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#recap-of-take-home-exercise-01",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#recap-of-take-home-exercise-01",
    "title": "Take Home Ex 02: DataVis Makeover",
    "section": "",
    "text": "The aim of Take Home Exercise 01 was to use appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions to reveal:\n\nthe distribution of Singapore students’ performance in mathematics, reading, and science, and\nthe relationship between these performances with schools, gender and socioeconomic status of the students.\n\nThe dataset used was extracted from the “PISA 2022 database” which contains the full set of responses from individual students."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#loading-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#loading-r-packages",
    "title": "Take Home Ex 02: DataVis Makeover",
    "section": "2.1 Loading R Packages",
    "text": "2.1 Loading R Packages\nIn this take-home exercise, eleven R packages will be used. They are:\n\ntidyverse,\nhaven,\nggplot2,\nggrepel,\npatchwork,\nggthemes,\nhrbrthemes,\nggdist,\nggridges,\ncolorspace,\ngridExtra,\ncowplot.\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven, ggplot2, ggrepel, patchwork, ggthemes, hrbrthemes, ggdist, ggridges, colorspace, gridExtra,cowplot)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#importing-pisa-2022-data",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#importing-pisa-2022-data",
    "title": "Take Home Ex 02: DataVis Makeover",
    "section": "2.2 Importing PISA 2022 Data",
    "text": "2.2 Importing PISA 2022 Data\nThe code chunk below uses the read_sas function from the haven package to import PISA data into R.\n\nstu_qqq &lt;- read_sas(\"data/stu_qqq.sas7bdat\")\n\nWe will next filter the observations to those from Singapore, using the filter function from the dpylr package.\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nWe will then save the file as a rds document in the data folder, using write_rds function. This reduces the file size from 3.9GB to 65.3MB, which makes it easier to push to Github subsequently.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\nWe will now import the file back into the R enviroment using the read_rds function.\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n\n\n\n\nWarning\n\n\n\nRemember to:\n\ndelete the 3.9GB source file from the data folder; and\ninclude “#| eval: false” into the first three code chunks of this section."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#original-plot-of-students-performance-distribution",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#original-plot-of-students-performance-distribution",
    "title": "Take Home Ex 02: DataVis Makeover",
    "section": "3.1 Original Plot of Students’ Performance Distribution",
    "text": "3.1 Original Plot of Students’ Performance Distribution\nThe first requirement for Take-Home_Ex02 was to show the distribution of Singapore students’ performance in mathematics, reading, and science. Freddie made use of boxplots to illustrate the distribution of the scores as shown below. The boxplots for each of the subjects were segregated into different tabs, and the code chunk was “hidden” from the audience’s view unless the user clicks on “Show the code”.\n\n\n3.1.1 Positive Areas\nThe three box plots were clear and simple. It gave me (as audience) a clear view of the min-max distribution, interquartile range, median and outliers. The code chunk was also hidden so that it does not clutter the interface.\n\n\n3.1.2 Areas for Improvement\nJust from the boxplots that were displayed one at a time, it was difficult for me to comprehend what the graphs were trying to tell me. I would propose adding a histogram to supplement the boxplots to give a better visualisation to the audience on what the distributions look like. In addition, there are also merits to combine all three graphs on a single output, so that the audience can have an overview at one glance, instead of having to navigate through different tabs to compare the similarities and differences between the three subjects. Lastly, it will be useful to add annotations to the graphs to highlight the key points of the three graphs.\n\n3.1.2.1 Sketch\n\n\n\n\n3.1.3 Re-Modelled Distribution\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nDo align the x-axis of both histograms and boxplots so that the distributions are mapped correctly.\n\n\n\n\n\nmeanmathscore = rowMeans(select(stu_qqq_SG, PV1MATH : PV10MATH))\nstu_qqq_SG$meanmathscore &lt;- meanmathscore\nh1 &lt;- ggplot(data = stu_qqq_SG, \n             aes(x = meanmathscore)) +\n  geom_histogram(bins=20, \n                 boundary = 850,\n                 color=\"black\", \n                 fill=\"aquamarine\") + \n  coord_cartesian(xlim=c(100,850)) +\n  ggtitle(\"Distribution of Maths Scores\") +\n  theme_economist() & theme(plot.title = element_text(size = 8))\n\nb1 &lt;- ggplot(data = stu_qqq_SG,\n       aes (x = \"Math\", y = meanmathscore))+\n  geom_boxplot(width=0.2, notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"aquamarine\", size=2)+\n  scale_y_continuous(limits = c(60,880), expand = c(0,0), breaks = seq(200, 800, by = 200))+\n  coord_flip() + \n  theme_economist() & theme(plot.title = element_text(size = 8))\n\nmeanreadscore = rowMeans(select(stu_qqq_SG, PV1READ : PV10READ))\nstu_qqq_SG$meanreadscore = meanreadscore\nh2 &lt;- ggplot(data = stu_qqq_SG, \n             aes(x = meanreadscore)) +\n  geom_histogram(bins=20, \n                 boundary = 850,\n                 color=\"black\", \n                 fill=\"cornsilk\") + \n  coord_cartesian(xlim=c(100,850)) +\n        annotate(\"text\",\n           x=300,\n           y=600,\n           color = \"red\",\n           label = \"There are more outliers\\nin Reading as compared to\\nMath and Science\", size = 2) +\n  ggtitle(\"Distribution of Reading Scores\") +\n  theme_economist() & theme(plot.title = element_text(size = 8))\n\nb2 &lt;- ggplot(data = stu_qqq_SG,\n       aes (x = \"Reading\", y = meanreadscore))+\n  geom_boxplot(width=0.2, notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"cornsilk\", size=2)+\n  scale_y_continuous(limits = c(60,880), expand = c(0,0), breaks = seq(200, 800, by = 200))+\n  coord_flip() + \n  theme_economist() & theme(plot.title = element_text(size = 8))\n\nmeansciescore = rowMeans(select(stu_qqq_SG, PV1SCIE : PV10SCIE))\nstu_qqq_SG$meansciescore = meansciescore\nh3 &lt;- ggplot(data = stu_qqq_SG, \n             aes(x = meansciescore)) +\n  geom_histogram(bins=20, \n                 boundary = 850,\n                 color=\"black\", \n                 fill=\"darkolivegreen2\") + \n  coord_cartesian(xlim=c(100,850)) +\n  ggtitle(\"Distribution of Science Scores\") +\n  theme_economist() & theme(plot.title = element_text(size = 8))\n\nb3 &lt;- ggplot(data = stu_qqq_SG,\n       aes (x = \"Science\", y = meansciescore))+\n  geom_boxplot(width=0.2, position = \"dodge\")+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"darkolivegreen2\", size=2)+\n  scale_y_continuous(limits = c(60,880), expand = c(0,0), breaks = seq(200, 800, by = 200)) +\n  coord_flip() +\n  theme_economist() & theme(plot.title = element_text(size = 8))\n\nplot_grid(h1, h2, h3, b1, b2, b3, ncol=3,align=\"v\",rel_heights=c(4,1.5),axis = 'lr')"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#original-plot-of-students-performance-by-gender",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#original-plot-of-students-performance-by-gender",
    "title": "Take Home Ex 02: DataVis Makeover",
    "section": "3.2 Original Plot of Students’ Performance by Gender",
    "text": "3.2 Original Plot of Students’ Performance by Gender\nThe second requirement for Take-Home_Ex02 was to examine the relationship between Singapore students’ performances with schools, gender and socioeconomic status of the students. Similarly, Freddie made use of boxplots to illustrate the distribution of the scores by gender as shown below. The boxplots for each of the subjects were segregated into different tabs, and the code chunk was “hidden” from the audience’s view unless the user clicks on “Show the code”.\n\n\n3.2.1 Positive Areas\nOn top of those positive areas described above in 3.1.1 Positive Areas, a side-by-side comparison between the two genders allowed the audience to have a better visualisation of how male students performed against female students.\n\n\n3.2.2 Areas for Improvement\nSimilar to the points mentioned in 3.1.2 Areas for Improvement, it was difficult for me to comprehend what the boxplots were trying to tell me. I would propose adding a rainplot to supplement the boxplots to give a better visualisation to the audience on how the distributions differ from each other. In addition, combining all three graphs on a single output allows the audience to have a bird’s eye view instead of having to navigate through different tabs to compare the similarities and differences between the three subjects. Lastly, it will be useful to add annotations to the graphs to highlight the key points of the three graphs.\n\n3.2.2.1 Sketch of Alternative Design\n\n\n\n\n3.2.3 Re-Modelled Distribution\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstu_qqq_SG$ST004D01T &lt;- replace(stu_qqq_SG$ST004D01T, stu_qqq_SG$ST004D01T == 1, \"Female\")\n\nstu_qqq_SG$ST004D01T &lt;- replace(stu_qqq_SG$ST004D01T, stu_qqq_SG$ST004D01T == 2, \"Male\")\n\ng1 &lt;- ggplot(stu_qqq_SG,\n       aes(x = ST004D01T, \n           y = meanmathscore)) +\n  labs(title = \"Distribution of Math Scores by Gender\", x = \"Gender\", y = \"Mean Math Score\") +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.1,\n               .width = 0,\n               scale = .8,\n               point_colour = NA,\n               slab_fill = \"aquamarine\") +\n  annotate(geom = \"text\",\n           x=2.8,\n           y=720,\n           label = \"Male students recorded peak frequency\\nat higher Math score\",\n           color = \"red\",\n           size = 2) +\n  geom_boxplot(width = .2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.05, \n            binwidth = 4,\n            dotsize = .5) +\n    scale_y_continuous(limits = c(250,850), expand = c(0,0), breaks = seq(200, 800, by = 200)) +\n  coord_flip() +\n  theme_economist()\n\n\ng2 &lt;- ggplot(stu_qqq_SG,\n       aes(x = ST004D01T, \n           y = meanreadscore)) +\n  labs(title = \"Distribution of Reading Scores by Gender\", x = \"Gender\", y = \"Mean Reading Score\") +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.1,\n               .width = 0,\n               scale = .8,\n               point_colour = NA,\n               slab_fill = \"cornsilk\") +\n    annotate(geom = \"text\",\n           x=2.8,\n           y=680,\n           label = \"Female and Male students recorded peak frequency\\nat similar Reading score\",\n           color = \"red\",\n           size = 2) +\n  geom_boxplot(width = .2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.05, \n            binwidth = 4,\n            dotsize = .5) +\n    scale_y_continuous(limits = c(250,850), expand = c(0,0), breaks = seq(200, 800, by = 200)) +\n  coord_flip() +\n  theme_economist()\n\ng3 &lt;- ggplot(stu_qqq_SG,\n       aes(x = ST004D01T, \n           y = meansciescore)) +\n  labs(title = \"Distribution of Science Scores by Gender\", x = \"Gender\", y = \"Mean Science Score\") +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.1,\n               .width = 0,\n               scale = .8,\n               point_colour = NA,\n               slab_fill = \"darkolivegreen2\") +\n      annotate(geom = \"text\",\n           x=2.8,\n           y=700,\n           label = \"Male students recorded peak frequency\\nat higher Science score\",\n           color = \"red\",\n           size = 2) +\n  geom_boxplot(width = .2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.05,\n            binwidth = 4,\n            dotsize = .5) +\n    scale_y_continuous(limits = c(250,850), expand = c(0,0), breaks = seq(200, 800, by = 200)) +\n  coord_flip() +\n  theme_economist()\n\ngrid.arrange(g1, g2, g3)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 - VISUAL ANALYTICS AND APPLICATIONS",
    "section": "",
    "text": "This website documents Roger’s learning journey through the Visual Analytics and Applications Jungle.\n\n\n\n\n\nIn this website, you will find my coursework prepared for this course. Let us navigate through this jungle and learn together."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "Before we begin.\nFirst, ensure all the names in the edges document (both source and target) are captured in the nodes document."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#installing-and-launching-r-packages",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#installing-and-launching-r-packages",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "2.1 Installing and launching R packages",
    "text": "2.1 Installing and launching R packages\nIn this in-class exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#importing-network-data-from-files",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#importing-network-data-from-files",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.1 Importing network data from files",
    "text": "3.1 Importing network data from files\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#wrangling-time",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#wrangling-time",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.2 Wrangling time",
    "text": "3.2 Wrangling time\nThe code chunk below will be used to transform the date to DMY using lubridate, and to create a new column to indicate the weekday.\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#reviewing-the-revised-date-fields",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#reviewing-the-revised-date-fields",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.3 Reviewing the revised date fields",
    "text": "3.3 Reviewing the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#wrangling-attributes",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#wrangling-attributes",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.4 Wrangling attributes",
    "text": "3.4 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nThe code chunk:\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#reviewing-the-revised-edges-file",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#reviewing-the-revised-edges-file",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.5 Reviewing the revised edges file",
    "text": "3.5 Reviewing the revised edges file\nTable below shows the data structure of the reformatted GAStech_edges data frame.\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#using-tbl_graph-to-build-tidygraph-data-model",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#using-tbl_graph-to-build-tidygraph-data-model",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "4.1 Using tbl_graph() to build tidygraph data model",
    "text": "4.1 Using tbl_graph() to build tidygraph data model\nIn this section, we will use tbl_graph() of tidygraph package to build an tidygraph’s network graph data.frame.\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\n\n\nNote\n\n\n\nIf direction of the email matters (Source A sends email to Target B), then directed = TRUE. Otherwise, directed = FALSE"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "4.2 Reviewing the output tidygraph’s graph object",
    "text": "4.2 Reviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8     8 Marin.Onda          Engineering    Drill Site Manager                  \n 9     9 Axel.Calzas         Engineering    Drill Technician                    \n10    10 Brand.Tempestad     Engineering    Drill Technician                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\n\n\nNote\n\n\n\nTake note that the number of nodes and edges in the igraph object should tally with the nodes and edges documents."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#changing-the-active-object",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#changing-the-active-object",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "4.3 Changing the active object",
    "text": "4.3 Changing the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#plotting-a-basic-network-graph",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#plotting-a-basic-network-graph",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.1 Plotting a basic network graph",
    "text": "5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. We can also replace geom_edge_link (straight line) with geom_edge_arc (curved line)."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#changing-the-default-network-graph-theme",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#changing-the-default-network-graph-theme",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.2 Changing the default network graph theme",
    "text": "5.2 Changing the default network graph theme\nIn this section, we will use theme_graph() to remove the x and y axes.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#changing-the-coloring-of-the-plot",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#changing-the-coloring-of-the-plot",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3 Changing the coloring of the plot",
    "text": "5.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'red'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-ggraphs-layouts",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-ggraphs-layouts",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4 Working with ggraph’s layouts",
    "text": "5.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n5.4.1 dh layout\nThe code chunk below will be used to plot the network graph using layout_with_dh() layout.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"dh\") +\n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'red'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nlayout argument is used to define the layout to be used. You do not need to use the entire syntax “layout_with_dh()”, and instead “dh” will suffice."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#modifying-network-nodes",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#modifying-network-nodes",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5 Modifying network nodes",
    "text": "5.5 Modifying network nodes\nIn this section, we will colour each node by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(colour = 'red')) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#modifying-edges",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#modifying-edges",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.6 Modifying edges",
    "text": "5.6 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(colour = 'red',\n                     width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-facet_edges",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-facet_edges",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "6.1 Working with facet_edges()",
    "text": "6.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-facet_edges-1",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-facet_edges-1",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "6.2 Working with facet_edges()",
    "text": "6.2 Working with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#a-framed-facet-graph",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#a-framed-facet-graph",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "6.3 A framed facet graph",
    "text": "6.3 A framed facet graph\nThe code chunk below adds frame to each graph.\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-facet_nodes",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-facet_nodes",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "6.4 Working with facet_nodes()",
    "text": "6.4 Working with facet_nodes()\nIn the code chunk below, facet_nodes() is used.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#computing-centrality-indices",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#computing-centrality-indices",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "7.1 Computing centrality indices",
    "text": "7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\nBetweenness_centrality is used to reflect the size of the node."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#visualising-network-metrics",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#visualising-network-metrics",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "7.2 Visualising network metrics",
    "text": "7.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#visualising-community",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#visualising-community",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "7.3 Visualising Community",
    "text": "7.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#data-preparation",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#data-preparation",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.1 Data preparation",
    "text": "8.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#plotting-the-first-interactive-network-graph",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#plotting-the-first-interactive-network-graph",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.2 Plotting the first interactive network graph",
    "text": "8.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-layout",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-layout",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.3 Working with layout",
    "text": "8.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-visual-attributes---nodes",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-visual-attributes---nodes",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.4 Working with visual attributes - Nodes",
    "text": "8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-visual-attributes---edges",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#working-with-visual-attributes---edges",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.5 Working with visual attributes - Edges",
    "text": "8.5 Working with visual attributes - Edges\nIn the code chunk below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#interactivity",
    "href": "In-Class_Ex/In-Class_Ex08/In-Class_Ex08.html#interactivity",
    "title": "In-Class_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.6 Interactivity",
    "text": "8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = list(enabled = TRUE,\n                                     style = 'background: black;\n                                     color: white')) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex07/In-Class_Ex07a.html",
    "href": "In-Class_Ex/In-Class_Ex07/In-Class_Ex07a.html",
    "title": "In-Class_Ex07a: Visualising and Analysing Geographic Data with Tableau",
    "section": "",
    "text": "1 Introduction\nIn this in-class exercise, we will learn how to use Tableau to create visualise and analyse geographical date with Tableau and publish them on Tableau Public.\nYou can access the published Tableau site here.\n\n\n2 Importing Data\nSelect all the files, and drag them into the table pane\n\nAlternatively, we can also drag file by file. Take note to drag the subsequent files onto the preceding file, and that the “union” textbox appears.\n\nThe resulting output is as follows. The eight spreadsheets have been joined into a single data source\n\n\n\n3 Viewing the Data\nDrag the postal code into the sheet.\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the SG map is automatically loaded in Tableau. This is only possible when there is internet connection, as Tableau API reads the postal code, and links up with URA website to pull the base map.\n\n\nFrom the output above, we noticed that there are 429 unknown locations. These are locations that are currently under construction, and URA intentionally mask these from the map.\n\nUsing Tableau, we can also extract the lat and long from the postal code in the file, by right-clicking and choosing ” View data”.\n\n\n\n4 Visualizing the Geographical Data\nDrag and drop number of units to “Size”, and Unit Price to “Color”. Use Median(Price) instead of SUM(Price)\n\nDrag Project Name into “Tooltip”\n\nNext, we want to create the boxplot:\n\ndrag Sales Date to Column, and select year\nDrag Sales Date (again) to column, and select quarter\ndrag unit price to Rows\nselect boxplot from the “Show Me”\nExclude leftmost data\nadjust the size of the output\n\n\nnow, we connect Sheet 1 with Sheet 2, by editing the tooltip\n\nNext, we will create a new sheet. Let’s change the Planning Area’s Geographic role to “State/Province”.\n\nComparing between the other geographic roles, “State/Province” gives the best fit.\n\nWe will now duplicate the sheet, and replace planning area with median (unit price)\n\nWe will also add filters based on: (1) type of sale and (2) property type\n\nNext, we will plot a treemap. We will select:(1) planning area, (2) planning region, (3) median(unit price) and (4) sum(number of units) into the sheet, and select “Treemap” from “Show Me”.\n\nWe will also add project name to labels, and adding filter based on property type\n\nWe can also organise treemaps by property type"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06b.html",
    "href": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06b.html",
    "title": "In-Class_Ex06b: Time Series with Tableau",
    "section": "",
    "text": "1 Introduction\nIn this in-class exercise, we will learn how to use Tableau to create Line Plots and Cycle Plots, deploy them on a dashboard, before publishing them on Tableau Public.\nYou can access the published Tableau site here.\n\n\n2 Creating Line Plots\nUsing the data source “arrivals_by_air.xls”, we will first plot the year by sum arrivals.\n\nFrom the output above, we can see that it is not very convenient for the user, because you will need need to add/ remove the countries individually. Thus, it will be better if we can change the user interface. To do that, we will be editing the data to a pivot table. First, we will go to Data Source, and select all countries.\n\nAfter that, hover the cursor to the last column, click on the black triangle and select “Pivot”.\n\nAfter which, we can now see that the data source has been changed to a pivot table, comprising three columns: Date, Country, Arrivals. We will rename the columns accordingly.\n\nFrom the sheet, we can see that there is low variability, which is not very useful.\n\nWe will now increase the variability, by changing the Year to Month. We will also add a filter to the line graph:\n\nNotice that the filter is not exposed to the user. We will now display the filter interface:\n\nAlthough there is a filter interface, the user will need to de-select the previous country when he wants to select a new country to visualise the data. Thus, we will improve user interface by selecting single value (list).\n\n\n\n3 Creating Cycle Plot\nFirst, we will duplicate the Line Graph sheet, and rename it as Cycle Plot.\nIn the column, we will change to Month, and add another Year.\n\nAs the output is beyond the display window, we will select “Fit Width”.\n\nWe will also add a reference line.\n\n\n\n4 Creating Dashboard\nAfter creating a new dashboard, we will first select “Automatic” for size, so that users can view the dashboard from both computers and mobile phones.\n\nAfter selecting both Line Graph and Cycle Plot, we notice that there are now two legends, which is not ideal.\n\nIn order to create one legend for both charts, we will first go back to the Line Graph Sheet. We will edit filter and select “All using this Data Source”.\n\nGoing back to the dashboard, we will remove the extra filter from the Cycle Plot.\n\n\n\n5 Publishing to Tableau Public\nExtract data\n\n\n\nPublish\n\n\n\n\n\n6 Creating Heat Map\nImport data from “event_log.csv”\nUse dimensions data\n\ncolumn\n\nchoose month\nchoose week number\n\nrow\n\nweekday\n\n\n\nnew field\n\n\n\nEdit, add “1”, pull to color\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nnotice that there are white columns in the output, as the months are not fused together.\n\n\nadding filter by zones"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In Hands-On_Ex01, we have shared that some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this exercise, we are going to share two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#installing-and-loading-the-packages",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#installing-and-loading-the-packages",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n### for referencing, use the HTML version if available. otherwise then the PDF version"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#data-import",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#data-import",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#plotting-ridgeline-graph-ggridges-method",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#plotting-ridgeline-graph-ggridges-method",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "3.1 Plotting ridgeline graph: ggridges method",
    "text": "3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nFrom the graph, better students in 3A do better than those in 3B. However, poorer students in 3A are worse off than those in 3B. Students in 3B performed more similarly than students in 3A.\nStudents in 3H can possibly be categorised into two groups, as there are two peaks in the distribution.\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges( \n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nNote\n\n\n\nThe focus for geom_density_ridges() plots is on identifying the pattern, and not plotting the exact points. If you want the latter, then use geom_ridgeline() &lt;– requires a height value in the argument."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#varying-fill-colors-along-the-x-axis",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#varying-fill-colors-along-the-x-axis",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "3.2 Varying fill colors along the x axis",
    "text": "3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#mapping-the-probabilities-directly-onto-colour",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#mapping-the-probabilities-directly-onto-colour",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "3.3 Mapping the probabilities directly onto colour",
    "text": "3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nFrom the graph, we can see where the different percentiles fall within each distribution. For instance, the 50th percentile and 90th percentile of students in Class 3A perform better than Class 3B.\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#ridgeline-plots-with-quantile-lines",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#ridgeline-plots-with-quantile-lines",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "3.4 Ridgeline plots with quantile lines",
    "text": "3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#plotting-a-half-eye-graph",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#plotting-a-half-eye-graph",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "4.1 Plotting a Half Eye graph",
    "text": "4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#adding-the-boxplot-with-geom_boxplot",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#adding-the-boxplot-with-geom_boxplot",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "4.2 Adding the boxplot with geom_boxplot()",
    "text": "4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#adding-the-dot-plots-with-stat_dots",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#adding-the-dot-plots-with-stat_dots",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "4.3 Adding the Dot Plots with stat_dots()",
    "text": "4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nstat_halfeye gives the distribution,\ngeom_boxplot provides the statistics summary, and\nstat_dots displays the sample size\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#finishing-touch",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04B.html#finishing-touch",
    "title": "In-Class_Ex04B: Visualising Distribution",
    "section": "4.4 Finishing touch",
    "text": "4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "title": "In-Class Exercise 3: Tableau Visualisation",
    "section": "",
    "text": "In this in-class exercise, we will learn how to use Tableau Public to create interactive scatterplots. You can access the Superstore tableau report here and story here; and the Exam-data dashboard here."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#importing-data",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#importing-data",
    "title": "In-Class Exercise 3: Tableau Visualisation",
    "section": "2.1 Importing Data",
    "text": "2.1 Importing Data\nWe will build on what we have created during In-Class Exercise 2 here."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#creating-a-scatter-plot",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#creating-a-scatter-plot",
    "title": "In-Class Exercise 3: Tableau Visualisation",
    "section": "3.1 Creating a Scatter Plot",
    "text": "3.1 Creating a Scatter Plot\n\nAt first glance, the data points have been automatically aggregated. From Analysis tab, uncheck “Aggregate Measures” to reveal the scatter plot.\n\nThis is the resulting scatter plot.\n\nTo make the scatter plot less cluttered, we can select “Percentile”.\n\n\n\n\n\n\n\nTip\n\n\n\nYTD Total, Compound Growth Rate, Year on Year Growth and YTD Growth can be used for time series visualisation.\n\n\nWe will next aggregate the points based on states, by using “Compute using State” and “Aggregate Measures” as shown below:\n\nResulting scatter plot as follows:\n\nTo insert trendlines, we can do so by selecting “Trend Line”. We can also derive the trend lines of specific observations by choosing specific points on the scatter plot.\n\nUnlike JMP where we can use the “lasso tool”, Tableau does not allow us to choose points of odd shapes. To overcome this, we need to select using the box select tool, then unselect those points we do not want.\n\nNext, we will change the size of the scatter plot. First, we drag “sales” to “Size”\n\nNext, changing the colour and opacity of the scatter plot.\n\n\nWe will also plot reference lines on the scatterplot so as to better visualise how the observations can be catergorised into four different quadrants.\n\nWe will now have a scatterplot categorised into four quadrants\n\nWe can also add a “Filter” option on the scatter plot to improve the interactivity.\n\nAlthough we can display the filter panel on the right, but we notice that the graph disappears when none of the options are checked, which can lead to unnecessary panic.\n\nTo prevent that, we can mandate that at least one option needs to be chosen.\n\nWe can help readers zoom into the details of each point. First, we need to create a new sheet name to follow the selected year. We will create a new sheet, and create a new annual sales and profit chart.\n\nCreating a dual axis for profits, so that the profits and losses will be reflected in blue and red respectively.\n\nResizing the charts so that we can view on both desktop and handphone.\n\n\nWe can also customising the animation effects that we want to visualise on the scatter plot.\n\nInserting details\n\nAnd now, we have an interactive scatter plot."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#creating-dashboards-and-story-points",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#creating-dashboards-and-story-points",
    "title": "In-Class Exercise 3: Tableau Visualisation",
    "section": "3.2 Creating Dashboards and Story Points",
    "text": "3.2 Creating Dashboards and Story Points\nWe can use dashboards to combine different visualisation sheets together.\nWe can use story points to combine different visualisation sheets and/or dashboards together.\nWe will practice this by importing the Exam_data.csv, then creating scatterplot and adjust the size and shape.\n\nWe would like to add a boxplot to the scatter plot. To do this, we will click on “Show Me”. We noticed that the boxplot option is actually greyed out, and we are unable to select this option. To overcome this, we will first click on Histogram, which then allows to select the boxplot option.\nThereafter, we will drag “ID” into Detail, and replace “CNT(English)” with “SUM(English)”.\n\nWe will duplicate the sheet and change “SUM(Engligh)” to “SUM(Maths)” to display the maths scores.\n\nWe will now use a Dashboard to piece the scatterplot and boxplots together."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#creating-coordinated-link-view-for-interactivity",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#creating-coordinated-link-view-for-interactivity",
    "title": "In-Class Exercise 3: Tableau Visualisation",
    "section": "3.3 Creating Coordinated Link View for Interactivity",
    "text": "3.3 Creating Coordinated Link View for Interactivity\nTo create a coordinated link view, we will check the aggregation for scatterplot, then drag “ID” into the Detail for each of the three sheets. This will allow the common identifiable between the three sheets to be “ID”.\nFirst, we will work on the scatter plot. Click Dashboard/ Actions/ Add actions/ Highlight and check those sheets that we want to be coordinated, as shown below:\n\nWe will repeat the above step for both Maths and English boxplots. This allows the points on the scatterplot to be selected when readers select any point on either of the boxplot.\n\nWe can adjust the layout (aka stitching) so that the axes across the different plots are synchronised, using Dashboard/Blank.\n\n\n\n\n\n\n\nNote\n\n\n\nAs this is the first time we are using the Exam_data.csv, we will need to extract the exam_data before publishing."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "title": "In-Class Exercise 01: Now You See It!",
    "section": "",
    "text": "This chapter aims to share on data manipulation using tidyverse, haven, read_rds and write_rds."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#loading-r-packages",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#loading-r-packages",
    "title": "In-Class Exercise 01: Now You See It!",
    "section": "2.1 Loading R Packages",
    "text": "2.1 Loading R Packages\nIn this in-class exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven.\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#importing-pisa-data",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#importing-pisa-data",
    "title": "In-Class Exercise 01: Now You See It!",
    "section": "2.2 Importing PISA Data",
    "text": "2.2 Importing PISA Data\nThe code chunk below uses the read_sas function from the haven package to import PISA data into R.\n\nstu_qqq &lt;- read_sas(\"data/stu_qqq.sas7bdat\")\n\nAs there are 613,744 observations across many countries, we will next filter the observations to those from Singapore, using the filter function from the dpylr package.\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nWe will then save the file as a rds document in the data folder, using write_rds function. This reduced the file size from 3.9GB to 65.3MB, which will make it easier to push to Github subsequently.\n\nwrite_rds(stu_qqq_SG, \n          \"data/stu_qqq_SG.rds\")\n\nWe will now import the file back into the R enviroment using the read_rds function.\n\nstu_qqq &lt;- read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n\n\n\n\nImportant\n\n\n\nRemember to:\n\ndelete the 3.9GB source file from the data folder\ninclude #| eval: false into the first three code chunks, to faciliate the subsequent push to Github."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, we will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#installing-and-launching-r-packages",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#installing-and-launching-r-packages",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "2.1 Installing and launching R packages",
    "text": "2.1 Installing and launching R packages\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#the-data",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#the-data",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#the-edges-data",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#the-edges-data",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.2 The edges data",
    "text": "3.2 The edges data\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#the-nodes-data",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#the-nodes-data",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.3 The nodes data",
    "text": "3.3 The nodes data\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\n\n3.3.1 Importing network data from files\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#reviewing-the-imported-data",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#reviewing-the-imported-data",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.4 Reviewing the imported data",
    "text": "3.4 Reviewing the imported data\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#wrangling-time",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#wrangling-time",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.5 Wrangling time",
    "text": "3.5 Wrangling time\nThe code chunk below will be used to perform the changes.\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#reviewing-the-revised-date-fields",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#reviewing-the-revised-date-fields",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.6 Reviewing the revised date fields",
    "text": "3.6 Reviewing the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#wrangling-attributes",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#wrangling-attributes",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.7 Wrangling attributes",
    "text": "3.7 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nThe code chunk:\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#reviewing-the-revised-edges-file",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#reviewing-the-revised-edges-file",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "3.8 Reviewing the revised edges file",
    "text": "3.8 Reviewing the revised edges file\nTable below shows the data structure of the reformatted GAStech_edges data frame.\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#the-tbl_graph-object",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#the-tbl_graph-object",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "4.1 The tbl_graph object",
    "text": "4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#the-dplyr-verbs-in-tidygraph",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#the-dplyr-verbs-in-tidygraph",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "4.2 The dplyr verbs in tidygraph",
    "text": "4.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#using-tbl_graph-to-build-tidygraph-data-model",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#using-tbl_graph-to-build-tidygraph-data-model",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "4.3 Using tbl_graph() to build tidygraph data model",
    "text": "4.3 Using tbl_graph() to build tidygraph data model\nIn this section, we will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, we will review the reference guide of tbl_graph()\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "4.4 Reviewing the output tidygraph’s graph object",
    "text": "4.4 Reviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#reviewing-the-output-tidygraphs-graph-object-1",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#reviewing-the-output-tidygraphs-graph-object-1",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "4.5 Reviewing the output tidygraph’s graph object",
    "text": "4.5 Reviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#changing-the-active-object",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#changing-the-active-object",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "4.6 Changing the active object",
    "text": "4.6 Changing the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#plotting-a-basic-network-graph",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#plotting-a-basic-network-graph",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.1 Plotting a basic network graph",
    "text": "5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#changing-the-default-network-graph-theme",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#changing-the-default-network-graph-theme",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.2 Changing the default network graph theme",
    "text": "5.2 Changing the default network graph theme\nIn this section, we will use theme_graph() to remove the x and y axes. Before we get started, it is advisable to read its reference guide at least once.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#changing-the-coloring-of-the-plot",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#changing-the-coloring-of-the-plot",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3 Changing the coloring of the plot",
    "text": "5.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-ggraphs-layouts",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-ggraphs-layouts",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4 Working with ggraph’s layouts",
    "text": "5.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph()."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#fruchterman-and-reingold-layout",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#fruchterman-and-reingold-layout",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5 Fruchterman and Reingold layout",
    "text": "5.5 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nlayout argument is used to define the layout to be used."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#modifying-network-nodes",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#modifying-network-nodes",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.6 Modifying network nodes",
    "text": "5.6 Modifying network nodes\nIn this section, we will colour each node by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\n\n\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#modifying-edges",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#modifying-edges",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "5.7 Modifying edges",
    "text": "5.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-facet_edges",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-facet_edges",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "6.1 Working with facet_edges()",
    "text": "6.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable to read its reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-facet_edges-1",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-facet_edges-1",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "6.2 Working with facet_edges()",
    "text": "6.2 Working with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#a-framed-facet-graph",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#a-framed-facet-graph",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "6.3 A framed facet graph",
    "text": "6.3 A framed facet graph\nThe code chunk below adds frame to each graph.\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-facet_nodes",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-facet_nodes",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "6.4 Working with facet_nodes()",
    "text": "6.4 Working with facet_nodes()\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#computing-centrality-indices",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#computing-centrality-indices",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "7.1 Computing centrality indices",
    "text": "7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#visualising-network-metrics",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#visualising-network-metrics",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "7.2 Visualising network metrics",
    "text": "7.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#visualising-community",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#visualising-community",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "7.3 Visualising Community",
    "text": "7.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#data-preparation",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#data-preparation",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.1 Data preparation",
    "text": "8.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#plotting-the-first-interactive-network-graph",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#plotting-the-first-interactive-network-graph",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.2 Plotting the first interactive network graph",
    "text": "8.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-layout",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-layout",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.3 Working with layout",
    "text": "8.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-visual-attributes---nodes",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-visual-attributes---nodes",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.4 Working with visual attributes - Nodes",
    "text": "8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-visual-attributes---edges",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#working-with-visual-attributes---edges",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.5 Working with visual attributes - Edges",
    "text": "8.5 Working with visual attributes - Edges\nIn the code chunk below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#interactivity",
    "href": "Hands-On_Ex/Hands-on_Ex08/Hands-On_Ex08.html#interactivity",
    "title": "Hands-On_Ex08: Modelling, Visualising and Analysing Network Data with R",
    "section": "8.6 Interactivity",
    "text": "8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = list(enabled = TRUE,\n                                     style = 'background: black;\n                                     color: white')) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visOption’s argument."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap.\n\n\nBy the end of this hands-on exercise, we will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#learning-outcome",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#learning-outcome",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "",
    "text": "By the end of this hands-on exercise, we will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#the-data",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#the-data",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#data-import-and-preparation",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#data-import-and-preparation",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "3.2 Data Import and Preparation",
    "text": "3.2 Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame.\nNotice that only the first ten records will be displayed."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "3.3 Creating a sf data frame from an aspatial data frame",
    "text": "3.3 Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\n\n\n\n\n\n\nThings to learn from the arguments above:\n\n\n\n\nThe coords argument requires us to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required us to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\n\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nWe can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#it-all-started-with-an-interactive-point-symbol-map",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#it-all-started-with-an-interactive-point-symbol-map",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "4.1 It all started with an interactive point symbol map",
    "text": "4.1 It all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#lets-make-it-proportional",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#lets-make-it-proportional",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "4.2 Lets make it proportional",
    "text": "4.2 Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#lets-give-it-a-different-colour",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#lets-give-it-a-different-colour",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "4.3 Lets give it a different colour",
    "text": "4.3 Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#i-have-a-twin-brothers",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#i-have-a-twin-brothers",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "4.4 I have a twin brothers :))",
    "text": "4.4 I have a twin brothers :))\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#all-about-tmap-package",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#all-about-tmap-package",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "5.1 All about tmap package",
    "text": "5.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#geospatial-data-wrangling-1",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#geospatial-data-wrangling-1",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "5.2 Geospatial data wrangling",
    "text": "5.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#data-wrangling",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07b.html#data-wrangling",
    "title": "In-Class_Ex07b: Visualising Geospatial Point Data",
    "section": "5.3 Data wrangling",
    "text": "5.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise, we will be able to create the following data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#importing-data",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#importing-data",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "3.1 Importing Data",
    "text": "3.1 Importing Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\nFirst, we will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#examining-the-data-structure",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#examining-the-data-structure",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "3.2 Examining the data structure",
    "text": "3.2 Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#data-preparation",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#data-preparation",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "3.3 Data Preparation",
    "text": "3.3 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#building-the-calendar-heatmaps",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#building-the-calendar-heatmaps",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "3.4 Building the Calendar Heatmaps",
    "text": "3.4 Building the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          linewidth = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#building-multiple-calendar-heatmaps",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#building-multiple-calendar-heatmaps",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "3.5 Building Multiple Calendar Heatmaps",
    "text": "3.5 Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#plotting-multiple-calendar-heatmaps",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#plotting-multiple-calendar-heatmaps",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "3.6 Plotting Multiple Calendar Heatmaps",
    "text": "3.6 Plotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#plotting-multiple-calendar-heatmaps-1",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#plotting-multiple-calendar-heatmaps-1",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "3.7 Plotting Multiple Calendar Heatmaps",
    "text": "3.7 Plotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-1-data-import",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-1-data-import",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "4.1 Step 1: Data Import",
    "text": "4.1 Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-2-deriving-month-and-year-fields",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-2-deriving-month-and-year-fields",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "4.2 Step 2: Deriving month and year fields",
    "text": "4.2 Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-4-extracting-the-target-country",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-4-extracting-the-target-country",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "4.3 Step 4: Extracting the target country",
    "text": "4.3 Step 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-5-computing-year-average-arrivals-by-month",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-5-computing-year-average-arrivals-by-month",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "4.4 Step 5: Computing year average arrivals by month",
    "text": "4.4 Step 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-6-plotting-the-cycle-plot",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-6-plotting-the-cycle-plot",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "4.5 Step 6: Plotting the cycle plot",
    "text": "4.5 Step 6: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-1-data-import-1",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-1-data-import-1",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "5.1 Step 1: Data Import",
    "text": "5.1 Step 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-2-plotting-the-slopegraph",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-On_Ex06.html#step-2-plotting-the-slopegraph",
    "title": "Hands-On_Ex06: Visualising and Analysing Time-oriented Data",
    "section": "5.2 Step 2: Plotting the slopegraph",
    "text": "5.2 Step 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\n#rice %&gt;% \n#  mutate(Year = factor(Year)) %&gt;%\n#  filter(Year %in% c(1961, 1980)) %&gt;%\n#  newggslopegraph(Year, Yield, Country,\n#                Title = \"Rice Yield of Top 11 Asian Counties\",\n#                SubTitle = \"1961-1980\",\n#                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n#Error in newggslopegraph() \n#  could not find function \"newggslopegraph\"\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, we will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#importing-data",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#importing-data",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3.1 Importing Data",
    "text": "3.1 Importing Data\nIn this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#plotting-a-simple-parallel-coordinates",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#plotting-a-simple-parallel-coordinates",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4.1 Plotting a simple parallel coordinates",
    "text": "4.1 Plotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#plotting-a-parallel-coordinates-with-boxplot",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#plotting-a-parallel-coordinates-with-boxplot",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4.2 Plotting a parallel coordinates with boxplot",
    "text": "4.2 Plotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, we will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\n\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#parallel-coordinates-with-facet",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#parallel-coordinates-with-facet",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4.3 Parallel coordinates with facet",
    "text": "4.3 Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#rotating-x-axis-text-label",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#rotating-x-axis-text-label",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4.4 Rotating x-axis text label",
    "text": "4.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#adjusting-the-rotated-x-axis-text-label",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#adjusting-the-rotated-x-axis-text-label",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4.5 Adjusting the rotated x-axis text label",
    "text": "4.5 Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#the-basic-plot",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#the-basic-plot",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.1 The basic plot",
    "text": "5.1 The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. We will learn how to overcome this problem in the next step."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#rotate-axis-label",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#rotate-axis-label",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.2 Rotate axis label",
    "text": "5.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#changing-the-colour-scheme",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#changing-the-colour-scheme",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.3 Changing the colour scheme",
    "text": "5.3 Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05D.html#parallel-coordinates-plot-with-histogram",
    "title": "Hands-On_Ex05D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4 Parallel coordinates plot with histogram",
    "text": "5.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "",
    "text": "The correlation coefficient is a popular statistic that is used to measure the type and strength of the relationship between two variables. The values of a correlation coefficient range between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficients of the pair comparisons are displayed in a table form known as a correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, we will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, we will learn how to create correlation matrix using pairs() of R Graphics. Next, we will learn how to plot corrgram using corrplot package of R. Lastly, we will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#importing-data",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#importing-data",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "3.1 Importing Data",
    "text": "3.1 Importing Data\nFirst, let us import the data into R by using read_csv() of readr package.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#building-a-basic-correlation-matrix",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#building-a-basic-correlation-matrix",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "4.1 Building a basic correlation matrix",
    "text": "4.1 Building a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#drawing-the-lower-corner",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#drawing-the-lower-corner",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "4.2 Drawing the lower corner",
    "text": "4.2 Drawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, we can display the upper half of the correlation matrix by using the code chunk below.\n\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#including-with-correlation-coefficients",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#including-with-correlation-coefficients",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "4.3 Including with correlation coefficients",
    "text": "4.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into our R session or script. Let’s have more fun way to display the correlation matrix.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#the-basic-plot",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#the-basic-plot",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "5.1 The basic plot",
    "text": "5.1 The basic plot\nOne of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is its ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#getting-started-with-corrplot",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#getting-started-with-corrplot",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "7.1 Getting started with corrplot",
    "text": "7.1 Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#working-with-visual-geometrics",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#working-with-visual-geometrics",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "7.2 Working with visual geometrics",
    "text": "7.2 Working with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\nFeel free to change the method argument to other supported visual geometrics."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#working-with-layout",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#working-with-layout",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "7.3 Working with layout",
    "text": "7.3 Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#working-with-mixed-layout",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#working-with-mixed-layout",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "7.4 Working with mixed layout",
    "text": "7.4 Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#combining-corrgram-with-the-significant-test",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#combining-corrgram-with-the-significant-test",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "7.5 Combining corrgram with the significant test",
    "text": "7.5 Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\n\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\n\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#reorder-a-corrgram",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#reorder-a-corrgram",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "7.6 Reorder a corrgram",
    "text": "7.6 Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#reordering-a-correlation-matrix-using-hclust",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "7.7 Reordering a correlation matrix using hclust",
    "text": "7.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#r-packages",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05B.html#r-packages",
    "title": "Hands-On_Ex05B: Visual Correlation Analysis",
    "section": "8.1 R packages",
    "text": "8.1 R packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html",
    "title": "Hands-On_Ex04D: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this exercise, we will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#installing-and-loading-the-packages",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#installing-and-loading-the-packages",
    "title": "Hands-On_Ex04D: Funnel Plots for Fair Comparisons",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#data-import",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#data-import",
    "title": "Hands-On_Ex04D: Funnel Plots for Fair Comparisons",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\ncovid19\n\n# A tibble: 267 × 7\n   `Sub-district ID` City       District `Sub-district` Positive Recovered Death\n               &lt;dbl&gt; &lt;fct&gt;      &lt;fct&gt;    &lt;fct&gt;             &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1        3172051003 JAKARTA U… PADEMAN… ANCOL              1776      1691    26\n 2        3173041007 JAKARTA B… TAMBORA  ANGKE              1783      1720    29\n 3        3175041005 JAKARTA T… KRAMAT … BALE KAMBANG       2049      1964    31\n 4        3175031003 JAKARTA T… JATINEG… BALI MESTER         827       797    13\n 5        3175101006 JAKARTA T… CIPAYUNG BAMBU APUS         2866      2792    27\n 6        3174031002 JAKARTA S… MAMPANG… BANGKA             1828      1757    26\n 7        3175051002 JAKARTA T… PASAR R… BARU               2541      2433    37\n 8        3175041004 JAKARTA T… KRAMAT … BATU AMPAR         3608      3445    68\n 9        3171071002 JAKARTA P… TANAH A… BENDUNGAN HIL…     2012      1937    38\n10        3175031002 JAKARTA T… JATINEG… BIDARA CINA        2900      2773    52\n# ℹ 257 more rows"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-On_Ex04D: Funnel Plots for Fair Comparisons",
    "section": "3.1 FunnelPlotR methods: The basic plot",
    "text": "3.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers. Plot is adjusted for overdispersion.\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#funnelplotr-methods-makeover-1",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#funnelplotr-methods-makeover-1",
    "title": "Hands-On_Ex04D: Funnel Plots for Fair Comparisons",
    "section": "3.2 FunnelPlotR methods: Makeover 1",
    "text": "3.2 FunnelPlotR methods: Makeover 1\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion.\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n+ data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#funnelplotr-methods-makeover-2",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#funnelplotr-methods-makeover-2",
    "title": "Hands-On_Ex04D: Funnel Plots for Fair Comparisons",
    "section": "3.3 FunnelPlotR methods: Makeover 2",
    "text": "3.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion.\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#computing-the-basic-derived-fields",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#computing-the-basic-derived-fields",
    "title": "Hands-On_Ex04D: Funnel Plots for Fair Comparisons",
    "section": "4.1 Computing the basic derived fields",
    "text": "4.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-On_Ex04D: Funnel Plots for Fair Comparisons",
    "section": "4.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "4.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#plotting-a-static-funnel-plot",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#plotting-a-static-funnel-plot",
    "title": "Hands-On_Ex04D: Funnel Plots for Fair Comparisons",
    "section": "4.3 Plotting a static funnel plot",
    "text": "4.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04D.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-On_Ex04D: Funnel Plots for Fair Comparisons",
    "section": "4.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "4.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#installing-and-launching-r-packages",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#installing-and-launching-r-packages",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "3.1 Installing and launching R packages",
    "text": "3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#importing-data",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#importing-data",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "3.2 Importing data",
    "text": "3.2 Importing data\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#one-sample-test-gghistostats-method",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#one-sample-test-gghistostats-method",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "3.3 One-sample test: gghistostats() method",
    "text": "3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#unpacking-the-bayes-factor",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#unpacking-the-bayes-factor",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "3.4 Unpacking the Bayes Factor",
    "text": "3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#how-to-interpret-bayes-factor",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#how-to-interpret-bayes-factor",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "3.5 How to interpret Bayes Factor",
    "text": "3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "3.6 Two-sample mean test: ggbetweenstats()",
    "text": "3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "3.7 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "3.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n3.7.1 ggbetweenstats - Summary of tests"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#significant-test-of-association-dependence-ggbarstats-methods",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#significant-test-of-association-dependence-ggbarstats-methods",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "3.9 Significant Test of Association (Dependence) : ggbarstats() methods",
    "text": "3.9 Significant Test of Association (Dependence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#installing-and-loading-the-required-libraries",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#installing-and-loading-the-required-libraries",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "5.1 Installing and loading the required libraries",
    "text": "5.1 Installing and loading the required libraries\nIn this exercise, readxl, performance, parameters and see will be used.\n\npacman::p_load(readxl, performance, parameters, see)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#importing-excel-file-readxl-methods",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#importing-excel-file-readxl-methods",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "5.2 Importing Excel file: readxl methods",
    "text": "5.2 Importing Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNotice that the output object car_resale is a tibble data frame."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#multiple-regression-model-using-lm",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#multiple-regression-model-using-lm",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "5.3 Multiple Regression Model using lm()",
    "text": "5.3 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "5.4 Model Diagnostic: checking for multicolinearity",
    "text": "5.4 Model Diagnostic: checking for multicolinearity\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#model-diagnostic-checking-normality-assumption",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#model-diagnostic-checking-normality-assumption",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "5.5 Model Diagnostic: checking normality assumption",
    "text": "5.5 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "5.6 Model Diagnostic: Check model for homogeneity of variances",
    "text": "5.6 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#model-diagnostic-complete-check",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#model-diagnostic-complete-check",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "5.7 Model Diagnostic: Complete check",
    "text": "5.7 Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#visualising-regression-parameters-see-methods",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#visualising-regression-parameters-see-methods",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "5.8 Visualising Regression Parameters: see methods",
    "text": "5.8 Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04B.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "Hands-On_Ex04B: Visual Statistical Analysis",
    "section": "5.9 Visualising Regression Parameters: ggcoefstats() methods",
    "text": "5.9 Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html",
    "title": "Hands On Exercise 03B: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this chapter, we will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, we will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore we start making animated graphs, we should first ask ourselves: Does it makes sense to go through the effort? If we are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if we are giving a presentation, a few well-placed animated graphics can help an audience connect with our topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#basic-concepts-of-animation",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#basic-concepts-of-animation",
    "title": "Hands On Exercise 03B: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#terminology",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#terminology",
    "title": "Hands On Exercise 03B: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Before we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore we start making animated graphs, we should first ask ourselves: Does it makes sense to go through the effort? If we are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if we are giving a presentation, a few well-placed animated graphics can help an audience connect with our topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#loading-the-r-packages",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#loading-the-r-packages",
    "title": "Hands On Exercise 03B: Programming Animated Statistical Graphics with R",
    "section": "2.1 Loading the R packages",
    "text": "2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#importing-data",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#importing-data",
    "title": "Hands On Exercise 03B: Programming Animated Statistical Graphics with R",
    "section": "2.2 Importing Data",
    "text": "2.2 Importing Data\nIn this chapter, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#building-a-static-population-bubble-plot",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#building-a-static-population-bubble-plot",
    "title": "Hands On Exercise 03B: Programming Animated Statistical Graphics with R",
    "section": "3.1 Building a static population bubble plot",
    "text": "3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#building-the-animated-bubble-plot",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#building-the-animated-bubble-plot",
    "title": "Hands On Exercise 03B: Programming Animated Statistical Graphics with R",
    "section": "3.2 Building the animated bubble plot",
    "text": "3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands On Exercise 03B: Programming Animated Statistical Graphics with R",
    "section": "4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03B.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands On Exercise 03B: Programming Animated Statistical Graphics with R",
    "section": "4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-On Exercise 02 : Beyond ggplot2 Fundamentals",
    "section": "2.1 Installing and loading the required libraries",
    "text": "2.1 Installing and loading the required libraries\nIn this chapter, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto the working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#importing-data",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#importing-data",
    "title": "Hands-On Exercise 02 : Beyond ggplot2 Fundamentals",
    "section": "2.2 Importing data",
    "text": "2.2 Importing data\nFor the purpose of this chapter, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#working-with-ggrepel",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#working-with-ggrepel",
    "title": "Hands-On Exercise 02 : Beyond ggplot2 Fundamentals",
    "section": "3.1 Working with ggrepel",
    "text": "3.1 Working with ggrepel\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-On Exercise 02 : Beyond ggplot2 Fundamentals",
    "section": "4.1 Working with ggtheme package",
    "text": "4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"aquamarine\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-On Exercise 02 : Beyond ggplot2 Fundamentals",
    "section": "4.2 Working with hrbthems package",
    "text": "4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"aquamarine\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above:\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#creating-composite-graphics-patchwork-methods",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#creating-composite-graphics-patchwork-methods",
    "title": "Hands-On Exercise 02 : Beyond ggplot2 Fundamentals",
    "section": "5.1 Creating Composite Graphics: patchwork methods",
    "text": "5.1 Creating Composite Graphics: patchwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork  which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-On Exercise 02 : Beyond ggplot2 Fundamentals",
    "section": "5.2 Combining two ggplot2 graphs",
    "text": "5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-On Exercise 02 : Beyond ggplot2 Fundamentals",
    "section": "5.3 Combining three ggplot2 graphs",
    "text": "5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#creating-figure-with-insert",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#creating-figure-with-insert",
    "title": "Hands-On Exercise 02 : Beyond ggplot2 Fundamentals",
    "section": "5.4 Creating figure with insert",
    "text": "5.4 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-On Exercise 02 : Beyond ggplot2 Fundamentals",
    "section": "5.5 Creating a composite figure by using patchwork and ggtheme",
    "text": "5.5 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist() & theme(plot.title = element_text(size = 8))"
  },
  {
    "objectID": "about.html#about-this-site",
    "href": "about.html#about-this-site",
    "title": "About",
    "section": "About this site",
    "text": "About this site\nThis is the work of a student pursuing Masters of Information Technology in Business at\nSingapore Management University.\nWhen not working/ studying, Roger enjoys spending time with family and friends."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "This chapter introduces the basic principles and essential components of ggplot2. At the same time, these components will be used to plot statistical graphics based on the principle of Layered Grammar of Graphics. By the end of this chapter, we will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#install-and-launch-r-packages",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#install-and-launch-r-packages",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "2.1 Install and Launch R Packages",
    "text": "2.1 Install and Launch R Packages\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#importing-the-data",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#importing-the-data",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "2.2 Importing the data",
    "text": "2.2 Importing the data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#r-graphic-vs-ggplot",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#r-graphic-vs-ggplot",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3.1 R Graphic VS ggplot",
    "text": "3.1 R Graphic VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended? The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "4.1 A Layered Grammar of Graphics",
    "text": "4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\n\n\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.1 Geometric Objects: geom_bar",
    "text": "7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.2 Geometric Objects: geom_dotplot",
    "text": "7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\nNote:\n\nThe y scale is not very useful, in fact it is very misleading.\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.3 Geometric Objects: geom_histogram()",
    "text": "7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\nNote: The default bin is 30."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.4 Modifying a geometric object by changing geom()",
    "text": "7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.5 Modifying a geometric object by changing aes()",
    "text": "7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\nNote: This approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.6 Geometric Objects: geom-density()",
    "text": "7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.7 Geometric Objects: geom_boxplot",
    "text": "7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.8 Geometric Objects: geom_violin",
    "text": "7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can also include the boxplot together with the violin plot for a better visual data representation."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.9 Geometric Objects: geom_point()",
    "text": "7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.10 geom objects can be combined",
    "text": "7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-stat",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-stat",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8.1 Working with stat()",
    "text": "8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8.2 Working with stat - the stat_summary() method",
    "text": "8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8.3 Working with stat - the geom() method",
    "text": "8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8.4 Adding a best fit curve on a scatterplot?",
    "text": "8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve. In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n\n\n\n\n\n\n\nNote: The default method used is loess.\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-facet_wrap",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-facet_wrap",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "9.1 Working with facet_wrap()",
    "text": "9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#facet_grid-function",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#facet_grid-function",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "9.2 facet_grid() function",
    "text": "9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-coordinate",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-coordinate",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "10.1 Working with Coordinate",
    "text": "10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "10.2 Changing the y- and x-axis range",
    "text": "10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-theme",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html#working-with-theme",
    "title": "Hands-On Exercise 01: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "11.1 Working with theme",
    "text": "11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this chapter, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "4.1 Tooltip effect with tooltip aesthetic",
    "text": "4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#displaying-multiple-information-on-tooltip",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "5.1 Displaying multiple information on tooltip",
    "text": "5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#customising-tooltip-style",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#customising-tooltip-style",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "6.1 Customising Tooltip style",
    "text": "6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#displaying-statistics-on-tooltip",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#displaying-statistics-on-tooltip",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "6.2 Displaying statistics on tooltip",
    "text": "6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "6.3 Hover effect with data_id aesthetic",
    "text": "6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#styling-hover-effect",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#styling-hover-effect",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "6.4 Styling hover effect",
    "text": "6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#combining-tooltip-and-hover-effect",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#combining-tooltip-and-hover-effect",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "6.5 Combining tooltip and hover effect",
    "text": "6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#click-effect-with-onclick",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#click-effect-with-onclick",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "6.6 Click effect with onclick",
    "text": "6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "6.7 Coordinated Multiple Views with ggiraph",
    "text": "6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "7.2 Working with visual variable: plot_ly() method",
    "text": "7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#coordinated-multiple-views-with-plotly",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "7.3 Coordinated Multiple Views with plotly",
    "text": "7.3 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nPlotCode\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\nTip\n\n\n\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#interactive-data-table-dt-package",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#interactive-data-table-dt-package",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "8.1 Interactive Data Table: DT package",
    "text": "8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class = \"display compact\", style = \"bootstrap5\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#linked-brushing-crosstalk-method",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#linked-brushing-crosstalk-method",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "8.2 Linked brushing: crosstalk method",
    "text": "8.2 Linked brushing: crosstalk method\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d, class = \"display compact\", style = \"bootstrap5\"), \n                  widths = 5)        \n\n\n\n\n\n\n\nNote\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#ggiraph",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#ggiraph",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "9.1 ggiraph",
    "text": "9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#plotly-for-r",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03A.html#plotly-for-r",
    "title": "Hands On Exercise 03A: Programming Interactive Data Visualisation with R",
    "section": "9.2 plotly for R",
    "text": "9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In Hands-On_Ex01, we have shared that some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this exercise, we are going to share two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#installing-and-loading-the-packages",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#installing-and-loading-the-packages",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#data-import",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#data-import",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "3.1 Plotting ridgeline graph: ggridges method",
    "text": "3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "3.2 Varying fill colors along the x axis",
    "text": "3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "3.3 Mapping the probabilities directly onto colour",
    "text": "3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "3.4 Ridgeline plots with quantile lines",
    "text": "3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#plotting-a-half-eye-graph",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#plotting-a-half-eye-graph",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "4.1 Plotting a Half Eye graph",
    "text": "4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "4.2 Adding the boxplot with geom_boxplot()",
    "text": "4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "4.3 Adding the Dot Plots with stat_dots()",
    "text": "4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#finishing-touch",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04A.html#finishing-touch",
    "title": "Hands-On_Ex04A: Visualising Distribution",
    "section": "4.4 Finishing touch",
    "text": "4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html",
    "title": "Hands-On_Ex04C: Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this exercise, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this exercise, we will be able to:\n\nplot statistics error bars by using ggplot2,\nplot interactive error bars by combining ggplot2, plotly and DT,\ncreate advanced by using ggdist, and\ncreate hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#installing-and-loading-the-packages",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#installing-and-loading-the-packages",
    "title": "Hands-On_Ex04C: Visualising Uncertainty",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#data-import",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#data-import",
    "title": "Hands-On_Ex04C: Visualising Uncertainty",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-On_Ex04C: Visualising Uncertainty",
    "section": "3.1 Plotting standard error bars of point estimates",
    "text": "3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-On_Ex04C: Visualising Uncertainty",
    "section": "3.2 Plotting confidence interval of point estimates",
    "text": "3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-On_Ex04C: Visualising Uncertainty",
    "section": "3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, we will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-On_Ex04C: Visualising Uncertainty",
    "section": "4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands-On_Ex04C: Visualising Uncertainty",
    "section": "4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\n\n\n\n\n\nYour turn\n\n\n\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "Hands-On_Ex04C: Visualising Uncertainty",
    "section": "4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05A.html",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05A.html",
    "title": "Hands-On_Ex05A: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) Its display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, we will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05A.html#importing-data",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05A.html#importing-data",
    "title": "Hands-On_Ex05A: Creating Ternary Plot with R",
    "section": "3.1 Importing Data",
    "text": "3.1 Importing Data\nTo import respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05A.html#preparing-the-data",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05A.html#preparing-the-data",
    "title": "Hands-On_Ex05A: Creating Ternary Plot with R",
    "section": "3.2 Preparing the Data",
    "text": "3.2 Preparing the Data\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05A.html#plotting-a-static-ternary-diagram",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05A.html#plotting-a-static-ternary-diagram",
    "title": "Hands-On_Ex05A: Creating Ternary Plot with R",
    "section": "4.1 Plotting a static ternary diagram",
    "text": "4.1 Plotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05A.html#plotting-an-interative-ternary-diagram",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05A.html#plotting-an-interative-ternary-diagram",
    "title": "Hands-On_Ex05A: Creating Ternary Plot with R",
    "section": "4.2 Plotting an interative ternary diagram",
    "text": "4.2 Plotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rows and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, we will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#importing-data",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#importing-data",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.1 Importing Data",
    "text": "3.1 Importing Data\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nThe output tibbled data frame is called wh."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#preparing-the-data",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#preparing-the-data",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.2 Preparing the data",
    "text": "3.2 Preparing the data\nNext, we need to change the rows by country name instead of row number by using the code chunk below\n\nrow.names(wh) &lt;- wh$Country"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#transforming-the-data-frame-into-a-matrix",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#transforming-the-data-frame-into-a-matrix",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.3 Transforming the data frame into a matrix",
    "text": "3.3 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\nNotice that wh_matrix is in R matrix format."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#heatmap-of-r-stats",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#heatmap-of-r-stats",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.1 heatmap() of R Stats",
    "text": "4.1 heatmap() of R Stats\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\n\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following our needs.\nThe code chunk below normalises the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#working-with-heatmaply",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#working-with-heatmaply",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.1 Working with heatmaply",
    "text": "5.1 Working with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          fontsize_row = 3,\n          fontsize_col = 4)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#data-transformation",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#data-transformation",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.2 Data transformation",
    "text": "5.2 Data transformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n5.2.1 Scaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\",\n          fontsize_row = 3,\n          fontsize_col = 4)\n\n\n\n\n\n\n\n5.2.2 Normalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_row = 3,\n          fontsize_col = 4)\n\n\n\n\n\n\n\n5.2.3 Percentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_row = 3,\n          fontsize_col = 4)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#clustering-algorithm",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#clustering-algorithm",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.3 Clustering algorithm",
    "text": "5.3 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#manual-approach",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#manual-approach",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.4 Manual approach",
    "text": "5.4 Manual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          fontsize_row = 3,\n          fontsize_col = 4)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#statistical-approach",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#statistical-approach",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5 Statistical approach",
    "text": "5.5 Statistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3,\n          fontsize_row = 3,\n          fontsize_col = 4)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#seriation",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#seriation",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.6 Seriation",
    "text": "5.6 Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\",\n          fontsize_row = 3,\n          fontsize_col = 4)\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\",\n          fontsize_row = 3,\n          fontsize_col = 4)\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\",\n          fontsize_row = 3,\n          fontsize_col = 4)\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          fontsize_row = 3,\n          fontsize_col = 4)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#working-with-colour-palettes",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#working-with-colour-palettes",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.7 Working with colour palettes",
    "text": "5.7 Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues,\n          fontsize_row = 3,\n          fontsize_col = 4)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#the-finishing-touch",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05C.html#the-finishing-touch",
    "title": "Hands-On_Ex05C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.8 The finishing touch",
    "text": "5.8 The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#importing-data",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#importing-data",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "3.1 Importing Data",
    "text": "3.1 Importing Data\nIn the code chunk below, read_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\nThe output tibble data.frame is called realis2018."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#data-wrangling-and-manipulation",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#data-wrangling-and-manipulation",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "3.2 Data Wrangling and Manipulation",
    "text": "3.2 Data Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n\n\n\n\nRecommendation\n\n\n\nStudents who are new to dplyr methods should consult Introduction to dplyr before moving on to the next section."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#grouped-summaries-without-the-pipe",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#grouped-summaries-without-the-pipe",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "3.3 Grouped summaries without the Pipe",
    "text": "3.3 Grouped summaries without the Pipe\nThe code chank below shows a typical two lines code approach to perform the steps.\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\nNote\n\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#grouped-summaries-with-the-pipe",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#grouped-summaries-with-the-pipe",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "3.4 Grouped summaries with the pipe",
    "text": "3.4 Grouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\n\n\n\n\n\nRecommendation\n\n\n\nTo learn more about pipe, visit this excellent article: Pipes in R Tutorial For Beginners.\n\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#designing-a-static-treemap",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#designing-a-static-treemap",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "4.1 Designing a static treemap",
    "text": "4.1 Designing a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#using-the-basic-arguments",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#using-the-basic-arguments",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "4.2 Using the basic arguments",
    "text": "4.2 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#working-with-vcolor-and-type-arguments",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#working-with-vcolor-and-type-arguments",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "4.3 Working with vColor and type arguments",
    "text": "4.3 Working with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#colours-in-treemap-package",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#colours-in-treemap-package",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "4.4 Colours in treemap package",
    "text": "4.4 Colours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#the-value-type-treemap",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#the-value-type-treemap",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "4.5 The “value” type treemap",
    "text": "4.5 The “value” type treemap\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#the-manual-type-treemap",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#the-manual-type-treemap",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "4.6 The “manual” type treemap",
    "text": "4.6 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code above:\n\n\n\n\nThe colour scheme used is very confusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\n\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#treemap-layout",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#treemap-layout",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "4.7 Treemap Layout",
    "text": "4.7 Treemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#working-with-algorithm-argument",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#working-with-algorithm-argument",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "4.8 Working with algorithm argument",
    "text": "4.8 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#using-sortid",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#using-sortid",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "4.9 Using sortID",
    "text": "4.9 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#designing-a-basic-treemap",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#designing-a-basic-treemap",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "5.1 Designing a basic treemap",
    "text": "5.1 Designing a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#defining-hierarchy",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#defining-hierarchy",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "5.2 Defining hierarchy",
    "text": "5.2 Defining hierarchy\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#installing-d3treer-package",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#installing-d3treer-package",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "6.1 Installing d3treeR package",
    "text": "6.1 Installing d3treeR package\nThis sub section shows how to install a R package which is not available in cran.\n\nIf this is the first time we install a package from github, we should install devtools package by using the code below or else you can skip this step.\n\n\ninstall.packages(\"devtools\")\n\n\nNext, we will load the devtools library and install the package found in github by using the codes below.\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\nNow we are ready to launch d3treeR package\n\n\nlibrary(d3treeR)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#designing-an-interactive-treemap",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05E.html#designing-an-interactive-treemap",
    "title": "Hands-On_Ex05E: Treemap Visualisation with R",
    "section": "6.2 Designing An Interactive Treemap",
    "text": "6.2 Designing An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, we will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nWe should read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#the-data",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#the-data",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#importing-geospatial-data-into-r",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#importing-geospatial-data-into-r",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "3.2 Importing Geospatial Data into R",
    "text": "3.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\zer0nemesis\\ISSS608-VAA\\Hands-On_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that only the first ten records will be displayed."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#importing-attribute-data-into-r",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#importing-attribute-data-into-r",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "3.3 Importing Attribute Data into R",
    "text": "3.3 Importing Attribute Data into R\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#data-preparation",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#data-preparation",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "3.4 Data Preparation",
    "text": "3.4 Data Preparation\nBefore a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n3.4.1 Data wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n3.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\n\n\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "4.1 Plotting a choropleth map quickly by using qtm()",
    "text": "4.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "4.2 Creating a choropleth map by using tmap’s elements",
    "text": "4.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will use tmap functions that are used to plot these elements.\n\n4.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n4.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\n\n4.2.3 Drawing a choropleth map using tm_fill() and *tm_border()**\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#data-classification-methods-of-tmap",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#data-classification-methods-of-tmap",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "4.3 Data classification methods of tmap",
    "text": "4.3 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n4.3.1 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n\n\n\n\nWarning: Maps Lie!\n\n\n\n\nDIY: Using what we had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can we draw?\n\n\n\n\n\n4.3.2 Plotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#colour-scheme",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#colour-scheme",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "4.4 Colour Scheme",
    "text": "4.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n4.4.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#map-layouts",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#map-layouts",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "4.5 Map Layouts",
    "text": "4.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n4.5.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n4.5.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n4.5.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#drawing-small-multiple-choropleth-maps",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "4.6 Drawing Small Multiple Choropleth Maps",
    "text": "4.6 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n4.6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n4.6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n4.6.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#mappping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#mappping-spatial-object-meeting-a-selection-criterion",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "4.7 Mappping Spatial Object Meeting a Selection Criterion",
    "text": "4.7 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#all-about-tmap-package",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#all-about-tmap-package",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "5.1 All about tmap package",
    "text": "5.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#geospatial-data-wrangling",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#geospatial-data-wrangling",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "5.2 Geospatial data wrangling",
    "text": "5.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#data-wrangling-1",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07a.html#data-wrangling-1",
    "title": "In-Class_Ex07a: Choropleth Mapping with R",
    "section": "5.3 Data wrangling",
    "text": "5.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html",
    "title": "In-Class_Ex07c: Analytical Mapping",
    "section": "",
    "text": "In this in-class exercise, we will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\nBy the end of this in-class exercise, we will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#learning-outcome",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#learning-outcome",
    "title": "In-Class_Ex07c: Analytical Mapping",
    "section": "",
    "text": "By the end of this in-class exercise, we will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#importing-data-into-r",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#importing-data-into-r",
    "title": "In-Class_Ex07c: Analytical Mapping",
    "section": "2.1 Importing Data into R",
    "text": "2.1 Importing Data into R"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#the-data",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#the-data",
    "title": "In-Class_Ex07c: Analytical Mapping",
    "section": "2.2 The Data",
    "text": "2.2 The Data\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#basic-choropleth-mapping",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#basic-choropleth-mapping",
    "title": "In-Class_Ex07c: Analytical Mapping",
    "section": "2.3 Basic Choropleth Mapping",
    "text": "2.3 Basic Choropleth Mapping"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#visualising-distribution-of-non-functional-water-point",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#visualising-distribution-of-non-functional-water-point",
    "title": "In-Class_Ex07c: Analytical Mapping",
    "section": "2.4 Visualising distribution of non-functional water point",
    "text": "2.4 Visualising distribution of non-functional water point\nPlot a choropleth map showing the distribution of non-functional water points by LGA\n\np1 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\np2 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total  water point by LGAs\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#deriving-proportion-of-functional-water-points-and-non-functional-water-points",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#deriving-proportion-of-functional-water-points-and-non-functional-water-points",
    "title": "In-Class_Ex07c: Analytical Mapping",
    "section": "3.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points",
    "text": "3.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#plotting-map-of-rate",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#plotting-map-of-rate",
    "title": "In-Class_Ex07c: Analytical Mapping",
    "section": "3.2 Plotting map of rate",
    "text": "3.2 Plotting map of rate\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#percentile-map",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#percentile-map",
    "title": "In-Class_Ex07c: Analytical Mapping",
    "section": "4.1 Percentile Map",
    "text": "4.1 Percentile Map\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n4.1.1 Data Preparation\nStep 1: Exclude records with NA by using the code chunk below.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nStep 2: Creating customised classification and extracting values\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geomtry field.\n\n\n\n\n4.1.2 Why writing functions?\nWriting a function has three big advantages over using copy-and-paste:\n\nYou can give a function an evocative name that makes your code easier to understand.\nAs requirements change, you only need to update code in one place, instead of many.\nYou eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\nSource: Chapter 19: Functions of R for Data Science.\n\n\n4.1.3 Creating the get.var function\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n4.1.4 A percentile mapping function\nNext, we will write a percentile mapping function by using the code chunk below.\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n4.1.5 Test drive the percentile mapping function\nTo run the function, type the code chunk as shown below.\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that this is just a bare bones implementation. Additional arguments such as the title, legend positioning just to name a few of them, could be passed to customise various features of the map."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#box-map",
    "href": "Hands-On_Ex/Hands-on_Ex07/Hands-On_Ex07c.html#box-map",
    "title": "In-Class_Ex07c: Analytical Mapping",
    "section": "4.2 Box map",
    "text": "4.2 Box map\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nDisplaying summary statistics on a choropleth map by using the basic principles of boxplot.\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n\n4.2.1 Creating the boxbreaks function\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n4.2.2 Creating the get.var function\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n4.2.3 Test drive the newly created function\nLet’s test the newly created function.\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n4.2.4 Boxmap function\nThe code chunk below is an R function to create a box map. - arguments: - vnam: variable name (as character, in quotes) - df: simple features polygon layer - legtitle: legend title - mtitle: map title - mult: multiplier for IQR - returns: - a tmap-element (plots a map)\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "",
    "text": "By the end of this hands-on exercise, we will be able to:\n\ncreate bullet chart by using ggplot2,\ncreate sparklines by using ggplot2 ,\nbuild industry standard dashboard by using R Shiny."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#data-set",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#data-set",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "3.1 Data set",
    "text": "3.1 Data set\nFor the purpose of this exercise, a personal database in Microsoft Access mdb format called Coffee Chain will be used."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#data-preparation",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#data-preparation",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\nThe code chunk below is used to import CoffeeChain.rds into R.\n\ncoffeechain &lt;- read_rds(\"data/rds/CoffeeChain.rds\")\n\nNote: This step is optional if coffeechain is already available in R.\nThe code chunk below is used to aggregate Sales and Budgeted Sales at the Product level.\n\nproduct &lt;- coffeechain %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#bullet-chart-in-ggplot2",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#bullet-chart-in-ggplot2",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "3.3 Bullet chart in ggplot2",
    "text": "3.3 Bullet chart in ggplot2\nThe code chunk below is used to plot the bullet charts using ggplot2 functions.\n\n\nCode\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#preparing-the-data",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#preparing-the-data",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "4.1 Preparing the data",
    "text": "4.1 Preparing the data\n\nsales_report &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  mutate(Month = month(Date)) %&gt;%\n  group_by(Month, Product) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup() %&gt;%\n  select(Month, Product, Sales)\n\nThe code chunk below is used to compute the minimum, maximum and end of the month sales.\n\nmins &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.min(Sales))\nmaxs &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.max(Sales))\nends &lt;- group_by(sales_report, Product) %&gt;% \n  filter(Month == max(Month))\n\nThe code chunk below is used to compute the 25 and 75 quantiles.\n\nquarts &lt;- sales_report %&gt;%\n  group_by(Product) %&gt;%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %&gt;%\n  right_join(sales_report)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#sparklines-in-ggplot2",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#sparklines-in-ggplot2",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "4.2 sparklines in ggplot2",
    "text": "4.2 sparklines in ggplot2\nThe following code chunk is used.\n\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#plotting-a-simple-bullet-chart",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#plotting-a-simple-bullet-chart",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "5.1 Plotting a simple bullet chart",
    "text": "5.1 Plotting a simple bullet chart\nIn this section, we will learn how to prepare a bullet chart report by using functions of gt and gtExtras packages.\n\n\nCode\nproduct %&gt;%\n  gt::gt() %&gt;%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\ncurrent\n\n\n\n\nAmaretto\n\n\n\n   \n\n\n\nCaffe Latte\n\n\n\n   \n\n\n\nCaffe Mocha\n\n\n\n   \n\n\n\nChamomile\n\n\n\n   \n\n\n\nColombian\n\n\n\n   \n\n\n\nDarjeeling\n\n\n\n   \n\n\n\nDecaf Espresso\n\n\n\n   \n\n\n\nDecaf Irish Cream\n\n\n\n   \n\n\n\nEarl Grey\n\n\n\n   \n\n\n\nGreen Tea\n\n\n\n   \n\n\n\nLemon\n\n\n\n   \n\n\n\nMint\n\n\n\n   \n\n\n\nRegular Espresso"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#plotting-coffechain-sales-report",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#plotting-coffechain-sales-report",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "6.1 Plotting Coffechain Sales report",
    "text": "6.1 Plotting Coffechain Sales report\n\n\nCode\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %&gt;%\n   gt() %&gt;%\n   gt_plt_sparkline('Monthly Sales',\n                    same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMonthly Sales\n\n\n\n\nAmaretto\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n\n\n\n   3.7K\n\n\n\nChamomile\n\n\n\n   3.3K\n\n\n\nColombian\n\n\n\n   5.5K\n\n\n\nDarjeeling\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n\n\n\n   2.7K\n\n\n\nEarl Grey\n\n\n\n   3.0K\n\n\n\nGreen Tea\n\n\n\n   1.5K\n\n\n\nLemon\n\n\n\n   4.4K\n\n\n\nMint\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#adding-statistics",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#adding-statistics",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "6.2 Adding statistics",
    "text": "6.2 Adding statistics\nFirst, calculate summary statistics by using the code chunk below.\n\nreport %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\n\n\n\n\nAmaretto\n1016\n1210\n1,119.00\n\n\nCaffe Latte\n1398\n1653\n1,528.33\n\n\nCaffe Mocha\n3322\n3828\n3,613.92\n\n\nChamomile\n2967\n3395\n3,217.42\n\n\nColombian\n5132\n5961\n5,457.25\n\n\nDarjeeling\n2926\n3281\n3,112.67\n\n\nDecaf Espresso\n3181\n3493\n3,326.83\n\n\nDecaf Irish Cream\n2463\n2901\n2,648.25\n\n\nEarl Grey\n2730\n3005\n2,841.83\n\n\nGreen Tea\n1339\n1476\n1,398.75\n\n\nLemon\n3851\n4418\n4,080.83\n\n\nMint\n1388\n1669\n1,519.17\n\n\nRegular Espresso\n890\n1218\n1,023.42"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#combining-the-data.frame",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#combining-the-data.frame",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "6.3 Combining the data.frame",
    "text": "6.3 Combining the data.frame\nNext, use the code chunk below to add the statistics on the table.\n\nspark &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\nsales &lt;- report %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\n\n\nsales_data = left_join(sales, spark)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#plotting-the-updated-data.table",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#plotting-the-updated-data.table",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "6.4 Plotting the updated data.table",
    "text": "6.4 Plotting the updated data.table\n\n\nCode\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales',\n                   same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#combining-bullet-chart-and-sparklines",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#combining-bullet-chart-and-sparklines",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "6.5 Combining bullet chart and sparklines",
    "text": "6.5 Combining bullet chart and sparklines\nSimilarly, we can combining the bullet chart and sparklines using the steps below.\n\nbullet &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %&gt;%\n  ungroup() \n\n\nsales_data = sales_data %&gt;%\n  left_join(bullet)\n\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales') %&gt;%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\nActual\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\n\n   \n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\n\n   \n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\n\n   \n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\n\n   \n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\n\n   \n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\n\n   \n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\n\n   \n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#plotting-interactive-sparklines",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#plotting-interactive-sparklines",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "7.1 Plotting interactive sparklines",
    "text": "7.1 Plotting interactive sparklines\nSimilar to gtExtras, to plot an interactive sparklines by using reactablefmtr package, we need to prepare the list field by using the code chunk below.\n\nreport &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize(`Monthly Sales` = list(Sales))\n\nNext, react_sparkline will be to plot the sparklines as shown below.\n\n\nCode\nreactable(\n  report,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#changing-the-pagesize",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#changing-the-pagesize",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "7.2 Changing the pagesize",
    "text": "7.2 Changing the pagesize\nBy default the pagesize is 10. In the code chunk below, arguments defaultPageSize is used to change the default setting.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#adding-points-and-labels",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#adding-points-and-labels",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "7.3 Adding points and labels",
    "text": "7.3 Adding points and labels\nIn the code chunk below highlight_points argument is used to show the minimum and maximum values points and label argument is used to label first and last values.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        labels = c(\"first\", \"last\")\n        )\n    )\n  )\n)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#adding-reference-line",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#adding-reference-line",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "7.4 Adding reference line",
    "text": "7.4 Adding reference line\nIn the code chunk below statline argument is used to show the mean line.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        statline = \"mean\"\n        )\n    )\n  )\n)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#adding-bandline",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#adding-bandline",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "7.5 Adding bandline",
    "text": "7.5 Adding bandline\nInstead adding reference line, bandline can be added by using the bandline argument.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        line_width = 1,\n        bandline = \"innerquartiles\",\n        bandline_color = \"green\"\n        )\n    )\n  )\n)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#changing-from-sparkline-to-sparkbar",
    "href": "Hands-On_Ex/Hands-on_Ex09/Hands-On_Ex09.html#changing-from-sparkline-to-sparkbar",
    "title": "Hands-On_Ex09:Information Dashboard Design: R methods",
    "section": "7.6 Changing from sparkline to sparkbar",
    "text": "7.6 Changing from sparkline to sparkbar\nInstead of displaying the values as sparklines, we can display them as sparkbars as shown below.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkbar(\n        report,\n        highlight_bars = highlight_bars(\n          min = \"red\", max = \"blue\"),\n        bandline = \"innerquartiles\",\n        statline = \"mean\")\n    )\n  )\n)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#importing-the-data",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#importing-the-data",
    "title": "In-Class Exercise 2: Tableau Visualisation",
    "section": "2.1 Importing the data",
    "text": "2.1 Importing the data\nThere are two ways to import the data. You can either drag the data source file into Tableau Window directly, or clicking on “file/ open/ data”"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#viewing-the-data",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#viewing-the-data",
    "title": "In-Class Exercise 2: Tableau Visualisation",
    "section": "2.2 Viewing the Data",
    "text": "2.2 Viewing the Data\nWe can see that there are three sheets to choose from, which corresponds with the sheets in the data source file. We will first drag “Orders” into the main window.\n\n\n\n\n\nAfter that is done, there will be two tables being displayed, as shown below. On the left are the descriptors for the fields, while the right displays the observations."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#establishing-relationships-between-sheets",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#establishing-relationships-between-sheets",
    "title": "In-Class Exercise 2: Tableau Visualisation",
    "section": "2.3 Establishing Relationships between Sheets",
    "text": "2.3 Establishing Relationships between Sheets\nTo establish a relationships between sheets, simply link them by dragging the sheets into the top window."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#tables",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#tables",
    "title": "In-Class Exercise 2: Tableau Visualisation",
    "section": "3.1 Tables",
    "text": "3.1 Tables\n\n3.1.1 Creating Tables\nTo create a table, first drag “Region” into the Columns and “Year” into Rows. After which, just drag “Sales” into the table itself, as follows:\n\n\n\n\n\n\n\n3.1.2 Computing Totals\nTo compute total, simply go over to the “Analytics Panel”, click on “Totals” and drag it over to either “Column Grand Totals”, “Row Grand Totals” or both."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#graphs",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#graphs",
    "title": "In-Class Exercise 2: Tableau Visualisation",
    "section": "3.2 Graphs",
    "text": "3.2 Graphs\nFirst, you can create a graph by dragging the following variables into the rows and columns.\n\n\n\n\n\n\n3.2.1 Adding Reference Line\nTo add a reference line, simply hover around the y-axis, right click and select “Add Reference Line”. Thereafter, on the pop-out box, you can select the various options for “Scope”, “Line” and “Formatting”.\n\n\n\n\n\nThis is what the per pane for “Scope” looks like:\n\n\n\n\n\nYou can also customise your own reference line by selecting “custom” under “Line/ Label”, and typing in “Avg = &lt;Value&gt;”.\n\n\n\n3.2.2 Adjusting Graph Lines\nUnder the Marks panel, you can select the “Colour” and “Size” for the graph lines.\n\n\n\n\n\n\n\n3.2.3 Incorporating Dual Axis Plot\nWe will demostrate how to incorporate a dual axis plot. First, we drag the “Profits” into the Rows. Notice that graphs for the profits will created in each output pane. Next, we will hover around the profit y-axis, right-click, and select “Dual Axis”.\n\n\nFrom the graph below, we notice that the scales for “Sum(Sales)” and “Sum(Profits)” are not synchronised. It may be difficult for readers to notice the different scales at first glance. Thus we will synchonise the axis by simplying hovering around the “Profit” y-axis, right-click and select “Synchronise Axis”.\n\n\n\n3.2.4 Editing Graph Colours from Ranged to Bi-Polar\nFirst, we will change the graph type of “Profits” from line to bar. Next, we will drag “Sum(Profits)” over to “Color” under the “Marks” panel, selecting 2 for “Stepped Color”.\n\n\n\n3.2.5 Formatting Axis Titles\nWe observe that the x-axis titles are being cut off, resulting in the first letter being displayed, and the remaining letters reflected as “…”. To overcome this, simply hover over “Month” in columns, right-click and select “Format”. From the “Format” panel that popped out, select how you want the dates to be reflected on the axis."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#things-about-tableau-you-must-know",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#things-about-tableau-you-must-know",
    "title": "In-Class Exercise 2: Tableau Visualisation",
    "section": "6.1 Things about Tableau you must know!",
    "text": "6.1 Things about Tableau you must know!\n\nPolaris: A System for Query, Analysis,and Visualization of Multidimensional Relational Databases\nTableau Technology\nShow Me: Automatic Presentation for Visual Analysis\nWhitepaper: Visual Analysis for Everyone\nAnalytics Best Practices in Tableau"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#learning-tableau",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#learning-tableau",
    "title": "In-Class Exercise 2: Tableau Visualisation",
    "section": "6.2 Learning Tableau",
    "text": "6.2 Learning Tableau\n\nGetting Started\nTableau Interface\nGetting Started with Visual Analytics\nFormatting\nThe Formatting Pane\nReference lines\nGetting Started with Data also self-learn the remaining videos under ’‘’Connecting to Data’’’\nGetting Started with Tableau Prep Builder. This is a brand-new product from Tableau designed to help everyone quickly and confidently combine, shape, and clean their data for analysis. You can learn more about Tableau Data Prep here. You are encouraged to view all the 12 videos under ’‘’Tableau Prep’’’."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this chapter, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "4.1 Tooltip effect with tooltip aesthetic",
    "text": "4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    ### ID is chosen as the tooltip interactivity \n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n### scale can also be made interactive, e.g. scale_fill_steps2_interactive\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n  ### svg : scalable vector graph (changing a png image to a spg format)\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#displaying-multiple-information-on-tooltip",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#displaying-multiple-information-on-tooltip",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "5.1 Displaying multiple information on tooltip",
    "text": "5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\n### need to specify where to extract the data for the tooltip; \\n is used to insert line breaks\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#customising-tooltip-style",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#customising-tooltip-style",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "6.1 Customising Tooltip style",
    "text": "6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#displaying-statistics-on-tooltip",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#displaying-statistics-on-tooltip",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "6.2 Displaying statistics on tooltip",
    "text": "6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n###calculating the mean, min-max scores on-the-fly using \"function\", hardcoding the descriptors, e.g. Mean maths scores, so that it is easier to read the tooltip\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#hover-effect-with-data_id-aesthetic",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#hover-effect-with-data_id-aesthetic",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "6.3 Hover effect with data_id aesthetic",
    "text": "6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS,\n        tooltip = CLASS), ### by adding a tooltip=class, you can also show the class when you hover over the selected points   \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#styling-hover-effect",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#styling-hover-effect",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "6.4 Styling hover effect",
    "text": "6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#combining-tooltip-and-hover-effect",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#combining-tooltip-and-hover-effect",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "6.5 Combining tooltip and hover effect",
    "text": "6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#click-effect-with-onclick",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#click-effect-with-onclick",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "6.6 Click effect with onclick",
    "text": "6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#coordinated-multiple-views-with-ggiraph",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#coordinated-multiple-views-with-ggiraph",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "6.7 Coordinated Multiple Views with ggiraph",
    "text": "6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = tooltip), ### to include the tooltip to display the student name and class              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = tooltip),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), ### to put the 2 graphs side-by side using \"print\", with \"code\" as a container (crosstalk function)\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"), \n         opts_hover_inv(css = \"opacity:0.2;\") ### using css commands to control the fill and opacity\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH) ### follows the java script for plot_ly()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#working-with-visual-variable-plot_ly-method",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#working-with-visual-variable-plot_ly-method",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "7.2 Working with visual variable: plot_ly() method",
    "text": "7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n### the legend box doubles up as a filter\n### we can also select groups of points by boxing them together\n### we can also use the lasso tool to choose points of irregular shapes (useful tool to use with Shiny)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nPlotCode\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\nNotice that the only extra line we need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#coordinated-multiple-views-with-plotly",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#coordinated-multiple-views-with-plotly",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "7.4 Coordinated Multiple Views with plotly",
    "text": "7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nPlotCode\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data) ### exam data becomes a object for highlight purposes\np1 &lt;- ggplot(data=d,  ### data is no longer Exam_data, and is replaced with d\n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\nTip\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#interactive-data-table-dt-package",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#interactive-data-table-dt-package",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "8.1 Interactive Data Table: DT package",
    "text": "8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class = \"display compact\", style = \"bootstrap5\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#linked-brushing-crosstalk-method",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#linked-brushing-crosstalk-method",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "8.2 Linked brushing: crosstalk method",
    "text": "8.2 Linked brushing: crosstalk method\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n### creates a datable table based on what plot_ly() has selected\n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d, class = \"display compact\", style = \"bootstrap5\"), \n                  widths = 5)  \n### data selected by plot_ly is passed over to cross talk, this allows the table\n### to display the records based on the selected obs from the plot_ly graphs     \n\n\n\n\n\n\n\nNote\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#ggiraph",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#ggiraph",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "9.1 ggiraph",
    "text": "9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#plotly-for-r",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04A.html#plotly-for-r",
    "title": "In Class Exercise 04A: Programming Interactive Data Visualisation with R",
    "section": "9.2 plotly for R",
    "text": "9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05a.html",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05a.html",
    "title": "In-Class_Ex05A: Critic on DataViz Makeover",
    "section": "",
    "text": "Probability Density Plot\nAxis values: instead of density for y-axis, should be probability\nobserving the PDF and comment the skewness of the three curves\nwhen the values are categorical, and “as.factor” is not used, the output will display a scatterplot instead of a boxplot\nsort by mean or median (my graph), to identify patterns\n\ncan also plot by boxplots\n\nfor scatterplot, need to pay attention on the aspect ratio. should try to fit within a square as much as possible, otherwise output will be skewed\nlayout - one histogram should not be larger than the other\n\nbut can be histogram on the left, then 3 x similarly sized boxplots on the right (with the same aspect and scale)\n\nTry to reduce redundancy in the output"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06a.html",
    "href": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06a.html",
    "title": "In-Class_Ex06a: Horizon Plot with R",
    "section": "",
    "text": "1 Overview\nalso Chapter 20\n\n\n2 Data Preparation\ninstalling the packages\n\npacman::p_load(ggHoriPlot, ggthemes, tidyverse)\n\nImporting the data. We also noticed that the current date fields in the data source is a categorical variable, and thus the mutate function is called to transform the data to a date variable.\n\naverp &lt;- read_csv(\"data/AVERP.csv\") %&gt;%\n  mutate(`Date` = dmy(`Date`))\n\n\n\n3 Creating Horizon Graph\n\naverp %&gt;%\n  filter(Date &gt;= \"2018-01-01\") %&gt;%\n  ggplot() +\n  geom_horizon(aes(x = Date, y = Values),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Consumer Items`~.) +\n  theme_few() +\n  scale_fill_hcl(palette= 'RdBu') +\n  theme(panel.spacing.y = unit(0, \"lines\"), strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n        legend.position = \"none\",\n            axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()) +\n  \n  scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex07/data/geospatial/MPSZ-2019.html",
    "href": "In-Class_Ex/In-Class_Ex07/data/geospatial/MPSZ-2019.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex07/In-Class_Ex07b.html",
    "href": "In-Class_Ex/In-Class_Ex07/In-Class_Ex07b.html",
    "title": "In-Class_Ex07a: Visualising and Analysing Geographic Data with Tableau",
    "section": "",
    "text": "1 Overview\n\n\n2 Data Preparation\ninstalling the packages\n\n\n3 Creating Horizon Graph"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex09/In-Class_Ex09.html",
    "href": "In-Class_Ex/In-Class_Ex09/In-Class_Ex09.html",
    "title": "In-Class_Ex09: Information Dashboard Design with Tableau",
    "section": "",
    "text": "1 Overview\nIn this in-class exercise, we will learn how to use Tableau to create:\n\nBullet Graph,\nSparkline,\nDashboard\n\nYou can access the Tableau webpage here.\n\n\n2 Creating Bullet Graph\nFirst, to create a bullet graph, we will select the parameters “Budget Sales”, “Market” and “Product Type” and select “Bullet Graph” in Show Me.\n\nNext, we will swap the reference line fields.\n\n\n\n3 Creating Sparkline\nFor the Column field, we will select Date, and change from Year to Month.\nFor the Row field, we will select “Market”, “Product Type” and “Sales”.\n\n\nNext, we will select independent axes for each row and column.\n\n\nFor easier viewing, we will adjust the margins so that we can fit all the graphs within one page.\n\n\n\nNext, we will make use of the “Create Calculated Field) to display the min and max point.\n\n\n\nThe code is as follows:\n\nWe will select the high-low point and insert it as our secondary y-axis.\n\nWe will change the shape to Circle, and synchronise both Y-axes.\n\nWe will also hide the indicator that is displayed on the bottom of the graph.\n\nNext, to differentiate the min and max points by colours, we will create a calculated field for Low-High Colour. The code is as follows:\n\nWe will now drag high-low colour to the graph, and change the colour for low and high points to red and blue respectively.\n\nAs the graph is now too cluttered by different colours, we will change the colour of the base graph to grey.\n\nNext, to display the values of the min and max values, we will create another calculated field for the high-low labels. The code is as follows:\n\nWe will add the labels to the graph.\n\n\n\n4 Creating Dashboard\nNext, we will create the dashboard which incorporates both the Bullet Graph (Annual Sales) and the Sparkline (Monthly Sales).\nWe will add a blank panel below Sparkline so that we can synchronise the borders. We will also synchronise to one single date filter.\n\nLastly, we will extract the data before publishing on Tableau Public."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take Home Exercise 01: Creating Data Visualisation Beyond Default",
    "section": "",
    "text": "OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#loading-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#loading-r-packages",
    "title": "Take Home Exercise 01: Creating Data Visualisation Beyond Default",
    "section": "3.1 Loading R Packages",
    "text": "3.1 Loading R Packages\nIn this take-home exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven.\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven, knitr, kableExtra, intsvy, ggrepel, patchwork, \n               ggthemes, hrbrthemes, ggdist, ggridges, colorspace, gridExtra)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-pisa-2022-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-pisa-2022-data",
    "title": "Take Home Exercise 01: Creating Data Visualisation Beyond Default",
    "section": "3.2 Importing PISA 2022 Data",
    "text": "3.2 Importing PISA 2022 Data\nThe code chunk below uses the read_sas function from the haven package to import PISA data into R.\n\nstu_qqq &lt;- read_sas(\"data/stu_qqq.sas7bdat\")\n\nWe will next filter the observations to those from Singapore, using the filter function from the dpylr package.\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nWe will then save the file as a rds document in the data folder, using write_rds function. This reduces the file size from 3.9GB to 65.3MB, which makes it easier to push to Github subsequently.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\nWe will now import the file back into the R enviroment using the read_rds function.\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n\n\n\n\nWarning\n\n\n\nRemember to:\n\ndelete the 3.9GB source file from the data folder; and\ninclude “#| eval: false” into the first three code chunks of this section."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#summary-statistics-of-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#summary-statistics-of-data",
    "title": "Take Home Exercise 01: Creating Data Visualisation Beyond Default",
    "section": "3.3 Summary Statistics of Data",
    "text": "3.3 Summary Statistics of Data\n\nFirst 5 RowsDataset StructureData Health\n\n\nDisplaying the first five rows using head():\n\nhead(stu_qqq_SG,5)\n\n# A tibble: 5 × 1,279\n  CNT   CNTRYID CNTSCHID CNTSTUID CYC   NatCen STRATUM SUBNATIO REGION  OECD\n  &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 SGP       702 70200052 70200001 08MS  070200 SGP01   7020000   70200     0\n2 SGP       702 70200134 70200002 08MS  070200 SGP01   7020000   70200     0\n3 SGP       702 70200112 70200003 08MS  070200 SGP01   7020000   70200     0\n4 SGP       702 70200004 70200004 08MS  070200 SGP01   7020000   70200     0\n5 SGP       702 70200152 70200005 08MS  070200 SGP01   7020000   70200     0\n# ℹ 1,269 more variables: ADMINMODE &lt;dbl&gt;, LANGTEST_QQQ &lt;dbl&gt;,\n#   LANGTEST_COG &lt;dbl&gt;, LANGTEST_PAQ &lt;dbl&gt;, Option_CT &lt;dbl&gt;, Option_FL &lt;dbl&gt;,\n#   Option_ICTQ &lt;dbl&gt;, Option_WBQ &lt;dbl&gt;, Option_PQ &lt;dbl&gt;, Option_TQ &lt;dbl&gt;,\n#   Option_UH &lt;dbl&gt;, BOOKID &lt;dbl&gt;, ST001D01T &lt;dbl&gt;, ST003D02T &lt;dbl&gt;,\n#   ST003D03T &lt;dbl&gt;, ST004D01T &lt;dbl&gt;, ST250Q01JA &lt;dbl&gt;, ST250Q02JA &lt;dbl&gt;,\n#   ST250Q03JA &lt;dbl&gt;, ST250Q04JA &lt;dbl&gt;, ST250Q05JA &lt;dbl&gt;, ST250D06JA &lt;chr&gt;,\n#   ST250D07JA &lt;chr&gt;, ST251Q01JA &lt;dbl&gt;, ST251Q02JA &lt;dbl&gt;, ST251Q03JA &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nNote\n\n\n\nAt first look,the data table seemed to be in order.\n\n\n\n\nChecking the structure of stu_qqq_SG using str():\n\nstr(stu_qqq_SG) \n\ntibble [6,606 × 1,279] (S3: tbl_df/tbl/data.frame)\n $ CNT         : chr [1:6606] \"SGP\" \"SGP\" \"SGP\" \"SGP\" ...\n  ..- attr(*, \"label\")= chr \"Country code 3-character\"\n $ CNTRYID     : num [1:6606] 702 702 702 702 702 702 702 702 702 702 ...\n  ..- attr(*, \"label\")= chr \"Country Identifier\"\n $ CNTSCHID    : num [1:6606] 70200052 70200134 70200112 70200004 70200152 ...\n  ..- attr(*, \"label\")= chr \"Intl. School ID\"\n $ CNTSTUID    : num [1:6606] 70200001 70200002 70200003 70200004 70200005 ...\n  ..- attr(*, \"label\")= chr \"Intl. Student ID\"\n $ CYC         : chr [1:6606] \"08MS\" \"08MS\" \"08MS\" \"08MS\" ...\n  ..- attr(*, \"label\")= chr \"PISA Assessment Cycle (2 digits + 2 character Assessment type - MS/FT)\"\n $ NatCen      : chr [1:6606] \"070200\" \"070200\" \"070200\" \"070200\" ...\n  ..- attr(*, \"label\")= chr \"National Centre 6-digit Code\"\n $ STRATUM     : chr [1:6606] \"SGP01\" \"SGP01\" \"SGP01\" \"SGP01\" ...\n  ..- attr(*, \"label\")= chr \"Stratum ID 5-character (cnt + original stratum ID)\"\n $ SUBNATIO    : chr [1:6606] \"7020000\" \"7020000\" \"7020000\" \"7020000\" ...\n  ..- attr(*, \"label\")= chr \"Adjudicated sub-region code 7-digit code (3-digit country code + region ID + stratum ID)\"\n $ REGION      : num [1:6606] 70200 70200 70200 70200 70200 70200 70200 70200 70200 70200 ...\n  ..- attr(*, \"label\")= chr \"REGION\"\n $ OECD        : num [1:6606] 0 0 0 0 0 0 0 0 0 0 ...\n  ..- attr(*, \"label\")= chr \"OECD country\"\n $ ADMINMODE   : num [1:6606] 2 2 2 2 2 2 2 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"Mode of Respondent\"\n $ LANGTEST_QQQ: num [1:6606] 313 313 313 313 313 313 313 313 313 313 ...\n  ..- attr(*, \"label\")= chr \"Language of Questionnaire\"\n $ LANGTEST_COG: num [1:6606] 313 313 313 313 313 313 313 313 313 313 ...\n  ..- attr(*, \"label\")= chr \"Language of Assessment\"\n $ LANGTEST_PAQ: num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Language of Parent Questionnaire\"\n $ Option_CT   : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Creative Thinking Option\"\n $ Option_FL   : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Financial Literacy Option\"\n $ Option_ICTQ : num [1:6606] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"ICT Questionnaire Option\"\n $ Option_WBQ  : num [1:6606] 0 0 0 0 0 0 0 0 0 0 ...\n  ..- attr(*, \"label\")= chr \"Well-Being Questionnaire Option\"\n $ Option_PQ   : num [1:6606] 0 0 0 0 0 0 0 0 0 0 ...\n  ..- attr(*, \"label\")= chr \"Parent Questionnaire Option\"\n $ Option_TQ   : num [1:6606] 0 0 0 0 0 0 0 0 0 0 ...\n  ..- attr(*, \"label\")= chr \"Teacher Questionnaire Option\"\n $ Option_UH   : num [1:6606] 0 0 0 0 0 0 0 0 0 0 ...\n  ..- attr(*, \"label\")= chr \"Une Heure Option\"\n $ BOOKID      : num [1:6606] 4 45 8 40 42 15 13 39 14 7 ...\n  ..- attr(*, \"label\")= chr \"Form Identifier\"\n $ ST001D01T   : num [1:6606] 10 10 10 10 10 10 10 10 10 10 ...\n  ..- attr(*, \"label\")= chr \"Student International Grade (Derived)\"\n $ ST003D02T   : num [1:6606] 10 6 7 2 9 9 3 4 8 6 ...\n  ..- attr(*, \"label\")= chr \"Student (Standardized) Birth - Month\"\n $ ST003D03T   : num [1:6606] 2006 2006 2006 2006 2006 ...\n  ..- attr(*, \"label\")= chr \"Student (Standardized) Birth -Year\"\n $ ST004D01T   : num [1:6606] 1 2 2 2 1 1 2 2 1 2 ...\n  ..- attr(*, \"label\")= chr \"Student (Standardized) Gender\"\n $ ST250Q01JA  : num [1:6606] 2 1 1 2 2 2 1 1 2 2 ...\n  ..- attr(*, \"label\")= chr \"Which of the following are in your [home]: A room of your own\"\n $ ST250Q02JA  : num [1:6606] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Which of the following are in your [home]: A computer (laptop, desktop, or tablet) that you can use for school work\"\n $ ST250Q03JA  : num [1:6606] 1 1 2 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Which of the following are in your [home]: Educational Software or Apps\"\n $ ST250Q04JA  : num [1:6606] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Which of the following are in your [home]: Your own [cell phone] with Internet access (e.g. smartphone)\"\n $ ST250Q05JA  : num [1:6606] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Which of the following are in your [home]: Internet access (e.g. Wi-fi) (excluding through smartphones)\"\n $ ST250D06JA  : chr [1:6606] \"7020002\" \"7020001\" \"7020001\" \"7020002\" ...\n  ..- attr(*, \"label\")= chr \"Which of the following are in your home? &lt;Country-specific item 1&gt;\"\n $ ST250D07JA  : chr [1:6606] \"7020002\" \"7020001\" \"7020002\" \"7020002\" ...\n  ..- attr(*, \"label\")= chr \"Which of the following are in your home? &lt;Country-specific item 2&gt;\"\n $ ST251Q01JA  : num [1:6606] 2 1 2 1 2 2 2 1 3 3 ...\n  ..- attr(*, \"label\")= chr \"How many of these items are there at your [home]: Cars, vans, or trucks\"\n $ ST251Q02JA  : num [1:6606] 1 4 1 2 2 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"How many of these items are there at your [home]: Mopeds or motorcycles\"\n $ ST251Q03JA  : num [1:6606] 3 3 3 3 2 2 3 3 4 3 ...\n  ..- attr(*, \"label\")= chr \"How many of these items are there at your [home]: Rooms with a bath or shower\"\n $ ST251Q04JA  : num [1:6606] 3 3 3 3 2 3 3 3 4 3 ...\n  ..- attr(*, \"label\")= chr \"How many of these items are there at your [home]: Rooms with a [flush toilet]\"\n $ ST251Q06JA  : num [1:6606] 3 4 2 2 1 2 2 3 4 1 ...\n  ..- attr(*, \"label\")= chr \"How many of these items are there at your [home]: Musical instruments (e.g. guitar, piano, [country-specific example])\"\n $ ST251Q07JA  : num [1:6606] 3 2 1 1 4 1 4 1 4 3 ...\n  ..- attr(*, \"label\")= chr \"How many of these items are there at your [home]: Works of art (e.g. paintings, sculptures, [country-specific example])\"\n $ ST251D08JA  : chr [1:6606] \"9999997\" \"9999997\" \"9999997\" \"9999997\" ...\n  ..- attr(*, \"label\")= chr \"How many of these items are there at your home? &lt;Country-specific item 1&gt;\"\n $ ST251D09JA  : chr [1:6606] \"9999997\" \"9999997\" \"9999997\" \"9999997\" ...\n  ..- attr(*, \"label\")= chr \"How many of these items are there at your home? &lt;Country-specific item 2&gt;\"\n $ ST253Q01JA  : num [1:6606] 7 8 7 6 7 7 8 8 8 7 ...\n  ..- attr(*, \"label\")= chr \"How many [digital devices] with screens are there in your [home]?\"\n $ ST254Q01JA  : num [1:6606] 2 3 2 2 2 2 2 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"How many of the following [digital devices] are in your [home]: Televisions\"\n $ ST254Q02JA  : num [1:6606] 1 2 2 1 3 2 2 5 2 2 ...\n  ..- attr(*, \"label\")= chr \"How many of the following [digital devices] are in your [home]: Desktop computers\"\n $ ST254Q03JA  : num [1:6606] 3 2 2 2 2 2 3 3 3 4 ...\n  ..- attr(*, \"label\")= chr \"How many of the following [digital devices] are in your [home]: Laptop computers or notebooks\"\n $ ST254Q04JA  : num [1:6606] 2 3 2 1 1 2 2 3 3 2 ...\n  ..- attr(*, \"label\")= chr \"How many of the following [digital devices] are in your [home]: Tablets (e.g. [iPad®], [BlackBerry® Playbook™])\"\n $ ST254Q05JA  : num [1:6606] 1 5 1 1 NA 1 1 5 2 2 ...\n  ..- attr(*, \"label\")= chr \"How many of the following [digital devices] are in your [home]: E-book readers (e.g. [Kindle™], [Kobo], [Bookeen])\"\n $ ST254Q06JA  : num [1:6606] 3 2 3 3 4 2 4 3 4 4 ...\n  ..- attr(*, \"label\")= chr \"How many of the following [digital devices] are in your [home]: [Cell phones] with Internet access (i.e. smartphones)\"\n $ ST255Q01JA  : num [1:6606] 7 4 4 3 2 2 4 5 7 4 ...\n  ..- attr(*, \"label\")= chr \"How many books are there in your [home]?\"\n $ ST256Q01JA  : num [1:6606] 2 4 5 2 4 1 1 3 4 4 ...\n  ..- attr(*, \"label\")= chr \"How many of these books at [home]: Religious books (e.g. [Bible], [Example 2])\"\n $ ST256Q02JA  : num [1:6606] 2 5 2 1 1 2 1 5 4 2 ...\n  ..- attr(*, \"label\")= chr \"How many of these books at [home]: Classical literature (e.g. [Shakespeare], [Example 2])\"\n $ ST256Q03JA  : num [1:6606] 4 5 2 1 1 2 2 5 5 1 ...\n  ..- attr(*, \"label\")= chr \"How many of these books at [home]: Contemporary literature\"\n $ ST256Q06JA  : num [1:6606] 4 3 3 2 2 5 2 4 4 1 ...\n  ..- attr(*, \"label\")= chr \"How many of these books at [home]: Books on science\"\n $ ST256Q07JA  : num [1:6606] 3 5 5 2 2 5 1 4 3 1 ...\n  ..- attr(*, \"label\")= chr \"How many of these books at [home]: Books on art, music, or design\"\n $ ST256Q08JA  : num [1:6606] 3 3 3 1 1 5 1 5 5 2 ...\n  ..- attr(*, \"label\")= chr \"How many of these books at [home]: [Technical reference books]\"\n $ ST256Q09JA  : num [1:6606] 2 2 4 2 2 2 2 2 2 3 ...\n  ..- attr(*, \"label\")= chr \"How many of these books at [home]: Dictionaries\"\n $ ST256Q10JA  : num [1:6606] 4 4 5 2 4 1 4 4 4 3 ...\n  ..- attr(*, \"label\")= chr \"How many of these books at [home]: Books to help with your school work\"\n $ ST230Q01JA  : num [1:6606] 4 4 2 4 4 3 2 2 3 4 ...\n  ..- attr(*, \"label\")= chr \"How many siblings (including brothers, sisters, step-brothers, and step-sisters) do you have?\"\n $ ST005Q01JA  : num [1:6606] 2 2 2 2 2 2 2 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"What is the [highest level of schooling] completed by your mother?\"\n $ ST006Q01JA  : num [1:6606] 2 2 2 2 2 2 2 NA 2 2 ...\n  ..- attr(*, \"label\")= chr \"Does your mother have any of the following qualifications: [ISCED level 8]\"\n $ ST006Q02JA  : num [1:6606] 2 2 2 2 2 2 2 1 2 2 ...\n  ..- attr(*, \"label\")= chr \"Does your mother have any of the following qualifications: [ISCED level 7]\"\n $ ST006Q03JA  : num [1:6606] 1 2 2 2 2 2 2 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Does your mother have any of the following qualifications: [ISCED level 6]\"\n $ ST006Q04JA  : num [1:6606] 2 1 2 2 1 1 2 1 1 2 ...\n  ..- attr(*, \"label\")= chr \"Does your mother have any of the following qualifications: [ISCED level 5]\"\n $ ST006Q05JA  : num [1:6606] 1 1 2 1 2 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Does your mother have any of the following qualifications: [ISCED level 4]\"\n $ ST007Q01JA  : num [1:6606] 2 2 2 4 2 2 4 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"What is the [highest level of schooling] completed by your father?\"\n $ ST008Q01JA  : num [1:6606] 2 2 2 NA 2 2 2 NA 2 2 ...\n  ..- attr(*, \"label\")= chr \"Does your father have any of the following qualifications: [ISCED level 8]\"\n $ ST008Q02JA  : num [1:6606] 2 2 2 NA 2 1 2 NA 2 2 ...\n  ..- attr(*, \"label\")= chr \"Does your father have any of the following qualifications: [ISCED level 7]\"\n $ ST008Q03JA  : num [1:6606] 2 2 2 NA 2 1 2 1 1 2 ...\n  ..- attr(*, \"label\")= chr \"Does your father have any of the following qualifications: [ISCED level 6]\"\n $ ST008Q04JA  : num [1:6606] 1 1 2 NA 1 1 2 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Does your father have any of the following qualifications: [ISCED level 5]\"\n $ ST008Q05JA  : num [1:6606] 2 1 2 1 2 1 2 1 1 2 ...\n  ..- attr(*, \"label\")= chr \"Does your father have any of the following qualifications: [ISCED level 4]\"\n $ ST258Q01JA  : num [1:6606] 1 1 1 5 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"In the past 30 days, how often did you not eat because there was not enough money to buy food?\"\n $ ST259Q01JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Now think about where you would place your family on this scale. Where would you say your family stands at this time?\"\n $ ST259Q02JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Now think about where you would place your family on this scale. Where do you think you will stand when you are 30?\"\n $ ST019AQ01T  : num [1:6606] 1 1 1 1 1 2 1 2 1 1 ...\n  ..- attr(*, \"label\")= chr \"In what country were you and your parents born? You\"\n $ ST019BQ01T  : num [1:6606] 1 1 2 1 1 2 1 2 1 1 ...\n  ..- attr(*, \"label\")= chr \"In what country were you and your parents born? Mother\"\n $ ST019CQ01T  : num [1:6606] 1 1 1 1 1 2 1 2 1 1 ...\n  ..- attr(*, \"label\")= chr \"In what country were you and your parents born? Father\"\n $ ST021Q01TA  : num [1:6606] NA NA NA NA NA 1 NA 1 NA NA ...\n  ..- attr(*, \"label\")= chr \"How old were you when you arrived in [country of test]?\"\n $ ST022Q01TA  : num [1:6606] 1 1 2 2 1 2 1 2 1 2 ...\n  ..- attr(*, \"label\")= chr \"What language do you speak at home most of the time?\"\n $ ST226Q01JA  : num [1:6606] 1 1 1 1 1 1 1 4 1 1 ...\n  ..- attr(*, \"label\")= chr \"How long have you been enrolled at this school?\"\n $ ST125Q01NA  : num [1:6606] 3 5 8 4 8 3 4 8 8 4 ...\n  ..- attr(*, \"label\")= chr \"How old were you when you started [ISCED 0]: Years\"\n $ ST126Q01TA  : num [1:6606] 4 5 5 5 5 5 5 5 4 5 ...\n  ..- attr(*, \"label\")= chr \"How old were you when you started [ISCED 1]: Years\"\n $ ST127Q01TA  : num [1:6606] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Have you ever repeated a [grade]: At [ISCED 1]\"\n $ ST127Q02TA  : num [1:6606] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Have you ever repeated a [grade]: At [ISCED 2]\"\n $ ST127Q03TA  : num [1:6606] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Have you ever repeated a [grade]: At [ISCED 3]\"\n $ ST260Q01JA  : num [1:6606] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Have you ever missed school for more than three months in a row: At [ISCED 1]\"\n $ ST260Q02JA  : num [1:6606] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Have you ever missed school for more than three months in a row: At [ISCED 2]\"\n $ ST260Q03JA  : num [1:6606] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Have you ever missed school for more than three months in a row: At [ISCED 3]\"\n $ ST261Q01JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: I was bored.\"\n $ ST261Q02JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: I was suspended for something (e.g. violence, aggression, use of drugs, drug dealing).\"\n $ ST261Q03JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: I was pregnant.\"\n $ ST261Q04JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: I could not reach school because of transportation problems.\"\n $ ST261Q05JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: I had to take care of a family member.\"\n $ ST261Q06JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: I had to help with work at home, the family business, or on the family land.\"\n $ ST261Q07JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: I had to get work to bring money home.\"\n $ ST261Q08JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: I was sick.\"\n $ ST261Q09JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: I did not feel safe at school.\"\n $ ST261Q10JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: I could not pay [school fees].\"\n $ ST261Q11JA  : num [1:6606] NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"label\")= chr \"Why miss school for 3+ months: School was closed because of a natural disaster (e.g. flood, earthquake).\"\n $ ST062Q01TA  : num [1:6606] 1 1 1 1 2 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"In the last two full weeks of school, how often: I [skipped] a whole school day\"\n  [list output truncated]\n\n\n\n\n\n\n\n\nNote\n\n\n\nA examination of the data structure revealed that the data types are all correct.\n\n\n\n\nChecking for duplicates:\n\nstu_qqq_SG[duplicated(stu_qqq_SG),]\n\n# A tibble: 0 × 1,279\n# ℹ 1,279 variables: CNT &lt;chr&gt;, CNTRYID &lt;dbl&gt;, CNTSCHID &lt;dbl&gt;, CNTSTUID &lt;dbl&gt;,\n#   CYC &lt;chr&gt;, NatCen &lt;chr&gt;, STRATUM &lt;chr&gt;, SUBNATIO &lt;chr&gt;, REGION &lt;dbl&gt;,\n#   OECD &lt;dbl&gt;, ADMINMODE &lt;dbl&gt;, LANGTEST_QQQ &lt;dbl&gt;, LANGTEST_COG &lt;dbl&gt;,\n#   LANGTEST_PAQ &lt;dbl&gt;, Option_CT &lt;dbl&gt;, Option_FL &lt;dbl&gt;, Option_ICTQ &lt;dbl&gt;,\n#   Option_WBQ &lt;dbl&gt;, Option_PQ &lt;dbl&gt;, Option_TQ &lt;dbl&gt;, Option_UH &lt;dbl&gt;,\n#   BOOKID &lt;dbl&gt;, ST001D01T &lt;dbl&gt;, ST003D02T &lt;dbl&gt;, ST003D03T &lt;dbl&gt;,\n#   ST004D01T &lt;dbl&gt;, ST250Q01JA &lt;dbl&gt;, ST250Q02JA &lt;dbl&gt;, ST250Q03JA &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nNote\n\n\n\nNo duplicated rows were found.\n\n\nChecking for missing values for school ID, gender, social-economical status, and plausible values for maths, reading and science:\n\nstu &lt;- c(stu_qqq_SG$CNTSCHID, stu_qqq_SG$ST004D01T, stu_qqq_SG$ESCS, \n         stu_qqq_SG$PV1MATH, stu_qqq_SG$PV2MATH, stu_qqq_SG$PV3MATH, stu_qqq_SG$PV4MATH, stu_qqq_SG$PV5MATH, stu_qqq_SG$PV6MATH, stu_qqq_SG$PV7MATH, stu_qqq_SG$PV8MATH, stu_qqq_SG$PV9MATH, stu_qqq_SG$PV10MATH, \n         stu_qqq_SG$PV1READ, stu_qqq_SG$PV2READ, stu_qqq_SG$PV3READ, stu_qqq_SG$PV4READ, stu_qqq_SG$PV5READ, stu_qqq_SG$PV6READ, stu_qqq_SG$PV7READ, stu_qqq_SG$PV8READ, stu_qqq_SG$PV9READ, stu_qqq_SG$PV10READ,\n         stu_qqq_SG$PV1SCIE, stu_qqq_SG$PV2SCIE, stu_qqq_SG$PV3SCIE, stu_qqq_SG$PV4SCIE, stu_qqq_SG$PV5SCIE, stu_qqq_SG$PV6SCIE, stu_qqq_SG$PV7SCIE, stu_qqq_SG$PV8SCIE, stu_qqq_SG$PV9SCIE, stu_qqq_SG$PV10SCIE)\n  \nsum(is.na(stu))\n\n[1] 47\n\nsum(is.na(stu_qqq_SG$ESCS))\n\n[1] 47\n\n\n\n\n\n\n\n\nNote\n\n\n\nA total of 47 missing values were found. A deeper study revealed that all 47 missing values were from “socioeconomic status”, which constitutes 0.7% of the dataset. To maintain the integrity of the analysis, these 47 students will be omitted when comparing PISA performance to socioeconomic status."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "title": "Take-Home_Ex03: Be Weatherwise or Otherwise",
    "section": "",
    "text": "According to an office report as shown in the infographic below,\n\nDaily mean temperature are projected to increase by 1.4 to 4.6, and\nThe contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced.\n\n\nIn this take home exercise, we will apply newly acquired visual interactivity and visualising uncertainty methods to validate the claims presented above"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "title": "Take-Home_Ex03: Be Weatherwise or Otherwise",
    "section": "2.1 Loading R Packages",
    "text": "2.1 Loading R Packages\nIn this take home exercise, the following R packages will be used:\n\ntidyverse,\nggplot2,\ngganimate,\nplotly,\nggiraph,\nDT.\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, ggplot2, gganimate, plotly, ggiraph, DT)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-temperature-data",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-temperature-data",
    "title": "Take-Home_Ex03: Be Weatherwise or Otherwise",
    "section": "2.2 Importing Temperature Data",
    "text": "2.2 Importing Temperature Data\nChangi will be selected for the weather station, and temperature chosen as the factor to be analysed. The data sets will be downloaded from historical daily temperature from Meteorological Service Singapore website, Specifically, we will be looking from the years 1983, 1993, 2003, 2013, and 2023, with May as the specific month of study.\n\nMay 1983 DataMay 1993 DataMay 2003 DataMay 2013 DataMay 2023 Data\n\n\n\ntemp1983 &lt;- read_csv(\"data/DAILYDATA_S24_198305.csv\", locale=locale(encoding=\"latin1\"))\n\ntemp1983 &lt;- temp1983 %&gt;% \n  select(Year, Month, Day, \n         `Mean Temperature (°C)`, \n         `Maximum Temperature (°C)`, \n         `Minimum Temperature (°C)`)\n\n\n\n\ntemp1993 &lt;- read_csv(\"data/DAILYDATA_S24_199305.csv\", locale=locale(encoding=\"latin1\"))\n\ntemp1993 &lt;- temp1993 %&gt;% \n  select(Year, Month, Day, \n         `Mean Temperature (°C)`, \n         `Maximum Temperature (°C)`, \n         `Minimum Temperature (°C)`)\n\n\n\n\ntemp2003 &lt;- read_csv(\"data/DAILYDATA_S24_200305.csv\", locale=locale(encoding=\"latin1\"))\n\ntemp2003 &lt;- temp2003 %&gt;% \n  select(Year, Month, Day, \n         `Mean Temperature (°C)`, \n         `Maximum Temperature (°C)`, \n         `Minimum Temperature (°C)`)\n\n\n\n\ntemp2013 &lt;- read_csv(\"data/DAILYDATA_S24_201305.csv\", locale=locale(encoding=\"latin1\"))\n\ntemp2013 &lt;- temp2013 %&gt;% \n  select(Year, Month, Day, \n         `Mean Temperature (°C)`, \n         `Maximum Temperature (°C)`, \n         `Minimum Temperature (°C)`)\n\n\n\n\ntemp2023 &lt;- read_csv(\"data/DAILYDATA_S24_202305.csv\", locale=locale(encoding=\"latin1\"))\n\ntemp2023 &lt;- temp2023 %&gt;% \n  select(Year, Month, Day,\n         `Mean Temperature (Â°C)`, \n         `Maximum Temperature (Â°C)`, \n         `Minimum Temperature (Â°C)`\n         )\n\ncolnames(temp2023)[colnames(temp2023) == 'Maximum Temperature (Â°C)'] &lt;- 'Maximum Temperature (°C)'\ncolnames(temp2023)[colnames(temp2023) == 'Mean Temperature (Â°C)'] &lt;- 'Mean Temperature (°C)'\ncolnames(temp2023)[colnames(temp2023) == 'Minimum Temperature (Â°C)'] &lt;- 'Minimum Temperature (°C)'\n\n\n\n\n\n\n\n\nNote\n\n\n\nUnlike the dataset extracted for the earlier years, the column names for the temperatures in May 2023 were coded with an additional “Â”. To align the naming nomenclauture across the different datsets, colnames from base R was used to remove the “Â”.\n\n\n\n\n\nLastly, using the code chunk below, we will combine the five datasets into a single document, and save it as a new dataset.\n\ncombinedTemp &lt;- bind_rows(temp1983,temp1993,temp2003,temp2013,temp2023)\n\nwrite_rds(combinedTemp, \"data/combinedTemp.csv\")\n\nNext, we will call the dataset “combinedTemp” into the environment.\n\ncombinedTemp &lt;- read_rds(\"data/combinedTemp.csv\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#summary-statistics-of-data",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#summary-statistics-of-data",
    "title": "Take-Home_Ex03: Be Weatherwise or Otherwise",
    "section": "2.3 Summary Statistics of Data",
    "text": "2.3 Summary Statistics of Data\n\nFirst 5 RowsDataset StructureData Health\n\n\nUsing DT, we will display the dataset as a interactive table on html page.\n\nDT::datatable(combinedTemp, class = \"display compact\", style = \"bootstrap5\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe data table seemed to be in order.\n\n\n\n\n\nstr(combinedTemp)\n\ntibble [155 × 6] (S3: tbl_df/tbl/data.frame)\n $ Year                    : num [1:155] 1983 1983 1983 1983 1983 ...\n $ Month                   : num [1:155] 5 5 5 5 5 5 5 5 5 5 ...\n $ Day                     : num [1:155] 1 2 3 4 5 6 7 8 9 10 ...\n $ Mean Temperature (°C)   : num [1:155] 27.5 28.3 28.9 28.1 28.2 27.9 28.2 27.3 26.2 28.1 ...\n $ Maximum Temperature (°C): num [1:155] 32.2 33.1 33.5 33.4 32.7 32.8 33.1 34 32.2 32.9 ...\n $ Minimum Temperature (°C): num [1:155] 24.3 25 26 25 25.3 25.2 24.9 23.5 23.7 24.7 ...\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe data types are all correct.\n\n\n\n\nChecking for missing values\n\nsum(is.na(combinedTemp))\n\n[1] 0\n\n\n\n\n\n\n\n\nNote\n\n\n\nNo missing values were found."
  }
]