---
title: "Take-Home_Ex04: Rain, Hail or Shine: Unveiling Mysteries of the Sky"
subtitle: "Working Document for Project Work"
author: "Roger Chen"
date: "24 Feb 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
number-sections: true
---

# Overview

In this take home exercise, we will be working towards creating a protoype module as part of the Visual Analytics Project. Specific to this exercise, it will solely comprise the Exploratory Data Analysis (EDA is my part), as the Confirmatory Data Analysis (CDA) and Forecasting are anchored by [Simin](https://isss608-ksm.netlify.app/take-home_ex/take-home_ex4/take-home_ex4#cda-3---are-there-certain-locations-drier-or-wetter-hotter-or-cooler) and [Sihui](https://gsh-vaa.netlify.app/take-home_ex/take-home_ex04/take-home_ex04a#shiny-dashboard-prototype) respectively. A draft UI design for R Shiny App will also be prepared as a precursor to the final project dashboard.

# Data Preparation

## Loading R Packages

The following R packages will be used, as shown in the code chunk below:

```{r}
pacman::p_load(dplyr, naniar, kableExtra,
               tidyverse, DT, ggplot2, ggridges,  
               ggdist, ggstatsplot,
               plotly, ggiraph, 
               viridis, gganimate)
```

## Importing Weather Data

The data sets will be downloaded from [historical daily temperature](https://www.weather.gov.sg/climate-historical-daily/) from [Meteorological Service Singapore](http://www.weather.gov.sg/home/) website. The data will focus on rain and temperature (the wind data will excluded as it falls outside the project scope).

The code chunk is as follows:

```{r}
#| eval: false

all_data <- read_csv("data/daily_historical.csv")
```

## Data Wrangling

First, we will find out how the temperature and rainfall data look like using boxplots.

```{r}
#| eval: false
#| code-fold: true

ggplot(all_data,
       aes(y= mean_temperature,
           x = as.factor(year))) +
  facet_wrap(~station) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 60,
                                   size = 6))

```

![](images/clipboard-2816800767.png){width="738"}

```{r}
#| eval: false
#| code-fold: true

ggplot(all_data,
       aes(y= daily_rainfall_total,
           x = as.factor(year))) +
  facet_wrap(~station) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 60,
                                   size = 6))
```

![](images/clipboard-1273158408.png)

::: callout-note
From the output above, there are only 13/37 stations that captured temperature data, while only 13/37 stations captured rainfall data from 1980 onwards (with the remaining stations starting from 2009 onwards). For ease of comparison, we will only look at the 13 stations with both temperature and rainfall data, and between a ten-year observation from 2014 to 2023.
:::

We will proceed to drop all those station with missing data, and filter those results from 2014 onwards, using the code chunk below.

```{r}
#| eval: false
#| code-fold: true

filtered_data <- all_data %>% 
  filter(year >="2014") %>%
  drop_na() 
```

Let's examine the boxplots based again.

```{r}
#| eval: false
#| code-fold: true

ggplot(filtered_data,
       aes(y= mean_temperature,
           x = as.factor(year))) +
  facet_wrap(~station) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 60,
                                   size = 6))
```

![](images/clipboard-1465182825.png)

```{r}
#| eval: false
#| code-fold: true

ggplot(filtered_data,
       aes(y= daily_rainfall_total,
           x = as.factor(year))) +
  facet_wrap(~station) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 60,
                                   size = 6))
```

![](images/clipboard-1407614811.png)

## Aggregating weather stations by regions

![](images/clipboard-2866862969.png)

With reference to the map above, we will carve out Singapore into three main regions for easier visualisations subsequently:

-   West \<- South West + North West districts

-   Central \<- Central Singapore district

-   East \<- North East + South East districts

```{r}
#| eval: false
#| code-fold: true

filtered_data <- filtered_data %>%
  mutate(region = case_when(
     (station == "Clementi" | station == "Tuas South" | station == "Choa Chu Kang (South)" | station == "Jurong (West)" | station == "Jurong Island" | station == "Admiralty" | station == "Pasir Panjang") ~ "West",
    (station == "Ang Mo Kio" | station == "Newton"  | station == "Sentosa Island") ~ "Central",
    (station == "Changi" | station == "East Coast Parkway" | station == "Tai Seng") ~ "East"
    ))
```

We will now extract the relevant data for temperature and rainfall, and save the data in rds format for faster data wrangling.

```{r}
#| eval: false
#| code-fold: true

filtered_data <- filtered_data %>%
  select(station, year, month, day, mean_temperature, maximum_temperature, minimum_temperature, daily_rainfall_total, highest_30_min_rainfall, highest_60_min_rainfall, highest_120_min_rainfall,region)

write_rds(filtered_data, "data/filtered_data.rds")
```

# Temperature Data EDA

```{r}
#| code-fold: true

filtered_data <- read_rds("data/filtered_data.rds")
```

Lets have a glimpse of what the data looks like.

```{r}
#| code-fold: true

glimpse(filtered_data)
```

## Aggregating the Mean, Min and Max Temperatures by Month

As the data is broken down by days, there will simply be too many data points across the 10 years of data (from 2014 to 2023). Thus, we will aggregate the data by monthly mean temperature, monthly mininum temperature and monthly maximum temperature.

```{r}
#| code-fold: true
monthly_mean_temp <- aggregate(mean_temperature ~ region + station + year + month, data = filtered_data, FUN = mean)

monthly_min_temp <- aggregate(minimum_temperature ~ region + station +year + month, data = filtered_data, FUN = min)

monthly_max_temp <- aggregate(maximum_temperature ~ region + station + year + month, data = filtered_data, FUN = max)

merged_temp <- monthly_mean_temp %>%
  left_join(monthly_max_temp, by = c("region", "station", "year", "month")) %>%
  left_join(monthly_min_temp, by = c("region", "station", "year", "month"))

glimpse(merged_temp)
```

## Distributions of Temperature Data

::: panel-tabset
## Ridgeline plot

Distribution of mean temperature

```{r}
#| code-fold: true

ridge_plot_t1 <- ggplot(merged_temp, aes(x = mean_temperature, y=factor(year), fill = stat(x))) +
  geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +
  scale_y_discrete(name= NULL) +
  scale_fill_viridis_c(name = "째C", option = "C") +
  labs(title = 'Distribution of Monthly Mean Temperature across years',
       x = "Temperature (째C)",
       y = "Year") +
  theme_ridges(font_size = 13, grid = TRUE) +
    theme(plot.title = element_text(size = 14),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8, angle = 360))

ridge_plot_t1

```

Here is an animated visualisation of the changes in mean temperatures

```{r}
#| code-fold: true

ggplot(data = merged_temp, 
       aes(x = mean_temperature, 
           y = station,
           fill = after_stat(x))) +
  
  geom_density_ridges_gradient(scale = 3, 
                               rel_min_height = 0.01) +
  
  scale_fill_viridis_c(name = "Colour Scale",
                       option = "C") +
  
  theme_minimal() +
    labs(title = "Distribution of Mean Temperatures by Station & Year",
      subtitle = "Year: {closest_state}",
       y = "Station",
       x = "Temperature (째C)") +
  
  theme(legend.position="none",
  plot.title = element_text(face = "bold", size = 12),
  axis.title.x = element_text(size = 10),
  axis.title.y = element_text(hjust=1, angle=0, size = 10),
  axis.text = element_text(size = 8),
  plot.background = element_rect(fill = "#f5f5f5", color = "#f5f5f5")) +

  transition_states(year) + 
  ease_aes('linear')
```

## Boxplot

Distribution of mean temperature

```{r}
#| code-fold: true

box_plot_t1 <- ggplot(merged_temp, 
                   aes(y= mean_temperature,
                       x = as.factor(year))) +
  geom_boxplot()+
  theme(axis.text.x = element_text(angle = 60)) +
  scale_x_discrete(name = "Year") +
  scale_y_continuous(name = "Mean Temperature")

box_plot_t1
```

Distribution of mean temperature by regions

```{r}
#| fig-width: 15
#| fig-height: 12
#| column: screen
#| code-fold: true

box_plot_t2 <- ggplot(merged_temp, 
                   aes(y= mean_temperature,
                       x = as.factor(year))) +
  geom_boxplot()+
  facet_wrap(~ region) +
  theme(axis.text.x = element_text(angle = 85,
                                   size = 6)) +
  scale_x_discrete(name = "Year") +
  scale_y_continuous(name = "Mean Temperature")

box_plot_t2
```

## Violin plots

Distribution of mean temperature

```{r}
#| code-fold: true

violin_plot_t1 <- plot_ly(data = merged_temp, x = ~year, y = ~mean_temperature, type = 'violin', 
               split = ~year, 
               box = list(visible = T),
               meanline = list(visible = T)) %>% # Adds a box plot inside the violin for summary statistics
  layout(title = list(text = "<b>Distribution of Mean Temperatures Across Years</b>", 
                                                   font = list(family = "Arial", size = 14),
                                                   xanchor = "center", xref = "paper",
                                                   yanchor = "middle", yref = "paper"),
                      yaxis = list(title = list(text = "Temperature (째C)", 
                                                font = list(family = "Arial", size = 12)) ),
                      xaxis = list(title = list(text = "Year", 
                                                font = list(family = "Arial", size = 12)) ))

violin_plot_t1
```
:::

# Rainfall Data EDA

## Aggregating the Daily Rainfall, and Highest Rainfall by Month

Similar to temperature data, we will aggregate the data by total monthly rainfall, highest 30min/ 60min and 120min rainfall within a month.

```{r}
#| code-fold: true

monthly_rainfall <- aggregate(daily_rainfall_total ~ region + station + year + month, data = filtered_data, FUN = sum)

highest_30min_rainfall <- aggregate(highest_30_min_rainfall ~ region + station +year + month, data = filtered_data, FUN = max)

highest_60min_rainfall <- aggregate(highest_60_min_rainfall ~ region + station + year + month, data = filtered_data, FUN = max)

highest_120min_rainfall <- aggregate(highest_120_min_rainfall ~ region + station + year + month, data = filtered_data, FUN = max)

merged_rainfall <- monthly_rainfall %>%
  left_join(highest_30min_rainfall, by = c("region", "station", "year", "month")) %>%
  left_join(highest_60min_rainfall, by = c("region", "station", "year", "month")) %>%
  left_join(highest_120min_rainfall, by = c("region", "station", "year", "month"))

#renaming the column name "daily_rainfall_total" to "monthly_rainfall_total" for a more accurate description
colnames(merged_rainfall)[colnames(merged_rainfall) == "daily_rainfall_total"] <- "monthly_rainfall_total"

glimpse(merged_rainfall)
```

## Distributions of Rainfall Data

::: panel-tabset
## Ridgeline Plot

```{r}
#| code-fold: true

ridge_plot_r1 <- ggplot(merged_rainfall, aes(x = monthly_rainfall_total, y=factor(year), fill = stat(x))) +
  geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +
  scale_y_discrete(name= NULL) +
  scale_fill_viridis_c(name = "째C", option = "C") +
  labs(title = 'Distribution of Monthly Rainfall Across Years',
       x = "Rainfall(mm)",
       y = "Year") +
  theme_ridges(font_size = 13, grid = TRUE) +
    theme(plot.title = element_text(size = 14),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8, angle = 360))

ridge_plot_r1

```

Here is an animated visualisation of the changes in mean temperatures

```{r}
#| code-fold: true

ggplot(data = merged_rainfall, 
       aes(x = monthly_rainfall_total, 
           y = station,
           fill = after_stat(x))) +
  
  geom_density_ridges_gradient(scale = 3, 
                               rel_min_height = 0.01) +
  
  scale_fill_viridis_c(name = "Colour Scale",
                       option = "C") +
  
  theme_minimal() +
    labs(title = "Distribution of Monthly Total Rainfall by Station & Year",
      subtitle = "Year: {closest_state}",
       y = "Station",
       x = "Rainfall") +
  
  theme(legend.position="none",
  plot.title = element_text(face = "bold", size = 12),
  axis.title.x = element_text(size = 10),
  axis.title.y = element_text(hjust=1, angle=0, size = 10),
  axis.text = element_text(size = 8),
  plot.background = element_rect(fill = "#f5f5f5", color = "#f5f5f5")) +

  transition_states(year) + 
  ease_aes('linear')
```

## Box Plot

Distribution of Monthly Total Rainfall

```{r}
#| code-fold: true

box_plot_r1 <- ggplot(merged_rainfall, 
                   aes(y= monthly_rainfall_total,
                       x = as.factor(year))) +
  geom_boxplot()+
  theme(axis.text.x = element_text(angle = 60)) +
  scale_x_discrete(name = "Year") +
  scale_y_continuous(name = "Monthly Total Rainfall(mm)")

box_plot_r1
```

Distribution of Monthly Total Rainfall by Region

```{r}
#| fig-width: 15
#| fig-height: 12
#| column: screen
#| code-fold: true

box_plot_r2 <- ggplot(merged_rainfall, 
                   aes(y= monthly_rainfall_total,
                       x = as.factor(year))) +
  geom_boxplot()+
  facet_wrap(~ region) +
  theme(axis.text.x = element_text(angle = 85,
                                   size = 6)) +
  scale_x_discrete(name = "Year") +
  scale_y_continuous(name = "Monthly Total Rainfall(mm)")

box_plot_r2
```

## Violin Plot

```{r}
#| code-fold: true

violin_plot_t1 <- plot_ly(data = merged_rainfall, x = ~year, y = ~monthly_rainfall_total, type = 'violin', 
               split = ~year, 
               box = list(visible = T),
               meanline = list(visible = T)) %>% # Adds a box plot inside the violin for summary statistics
  layout(title = list(text = "<b>Distribution of Monthly Total Rainfall Across Years</b>", 
                                                   font = list(family = "Arial", size = 14),
                                                   xanchor = "center", xref = "paper",
                                                   yanchor = "middle", yref = "paper"),
                      yaxis = list(title = list(text = "Rainfall(mm)", 
                                                font = list(family = "Arial", size = 12)) ),
                      xaxis = list(title = list(text = "Year", 
                                                font = list(family = "Arial", size = 12)) ))

violin_plot_t1
```
:::

# UI Design

# Conclusion
